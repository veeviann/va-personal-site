[
  {
    "objectID": "hands-on/week02.html",
    "href": "hands-on/week02.html",
    "title": "Week 02 - Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "The following content is created by following the tutorial on this chapter.\n\npacman::p_load(ggrepel, patchwork, ggthemes, hrbrthemes, tidyverse)\n\nexam_data &lt;- read_csv(\"../data/Exam_data.csv\")",
    "crumbs": [
      "Week 02"
    ]
  },
  {
    "objectID": "hands-on/week02.html#introduction",
    "href": "hands-on/week02.html#introduction",
    "title": "Week 02 - Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "The following content is created by following the tutorial on this chapter.\n\npacman::p_load(ggrepel, patchwork, ggthemes, hrbrthemes, tidyverse)\n\nexam_data &lt;- read_csv(\"../data/Exam_data.csv\")",
    "crumbs": [
      "Week 02"
    ]
  },
  {
    "objectID": "hands-on/week02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "hands-on/week02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Week 02 - Beyond ggplot2 Fundamentals",
    "section": "2.2 Beyond ggplot2 Annotation: ggrepel",
    "text": "2.2 Beyond ggplot2 Annotation: ggrepel\nThe ggrepel package extends ggplot2 by providing geoms (geom_text_repel() and geom_label_repel()) that prevent overlapping text labels. These labels automatically adjust their positions to avoid overlapping with one another, data points, and the edges of the plotting area. The purpose of this is to improve readability by avoiding overlapping labels compared to geom_label() or geom_text().\nIn the example below, we will replace geom_label() with geom_label_repel().\n\nDefaultWith ggrepelWith ggrepel (overlaps allowed)\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              linewidth = 0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              linewidth = 0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              linewidth = 0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\",\n                   max.overlaps = nrow(exam_data)*0.2) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\nThis example highlights a limitation: when too many labels overlap, the plot becomes cluttered and less informative. In the third tab, even annotating just 20% of the points results in an overcrowded graph. If identifying specific points is important, consider annotating only those points or subsetting the dataset to focus on key data. Alternatively, using hover text can be a more effective way to display identities without overwhelming the plot.",
    "crumbs": [
      "Week 02"
    ]
  },
  {
    "objectID": "hands-on/week02.html#beyond-ggplot2-themes",
    "href": "hands-on/week02.html#beyond-ggplot2-themes",
    "title": "Week 02 - Beyond ggplot2 Fundamentals",
    "section": "2.3 Beyond ggplot2 themes",
    "text": "2.3 Beyond ggplot2 themes\nThe examples below showcases the eight built-in themes in ggplot2.\n\ntheme_gray()theme_bw()theme_classic()theme_dark()theme_light()theme_linedraw()theme_minimal()theme_void()\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100) +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100) +\n  theme_bw() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100) +\n  theme_classic() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100) +\n  theme_dark() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100) +\n  theme_light() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100) +\n  theme_linedraw() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100) +\n  theme_minimal() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100) +\n  theme_void() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe geom itself does not change with respect to the theme. Therefore, attributes like color and fill within the geom must be explicitly defined and are not automatically adjusted by the theme.\n\n\n\n2.3.1 ggtheme package\n\ntheme_economist()theme_wsj()theme_solarized()\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  theme_economist() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  theme_wsj() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  theme_solarized() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.3.2 hrbrthemes package\nThe link from the page did not work so I refered to this page instead.\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  scale_color_ipsum() +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\") +\n  ggtitle(\"Distribution of Maths scores\")",
    "crumbs": [
      "Week 02"
    ]
  },
  {
    "objectID": "hands-on/week02.html#composing-graphs-using-patchwork",
    "href": "hands-on/week02.html#composing-graphs-using-patchwork",
    "title": "Week 02 - Beyond ggplot2 Fundamentals",
    "section": "2.4 Composing Graphs using patchwork",
    "text": "2.4 Composing Graphs using patchwork\nSometimes we need more than one graph to create a visually compelling narrative. In this section, we will be exploring different ggplot2 extensions to provide functions to compose figure with multiple graphs. The three graphs are as shown below.\n\nMath HistogramEnglish HistogramMath vs English Scatterplot\n\n\n\n\nShow the code\np1 &lt;- ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\") \n\np1\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\np2 &lt;- ggplot(data = exam_data, \n       aes(x = ENGLISH)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  coord_cartesian(xlim = c(0,100)) +\n  ggtitle(\"Distribution of English scores\") \n\np2\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\np3 &lt;- ggplot(data = exam_data, \n             aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              size = 0.5) + \n  coord_cartesian(xlim = c(0, 100),\n                  ylim = c(0, 100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\np3\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.4.1 patchwork operators\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n“|” operator to place the plots beside each other\n\n\nTwo-plotsThree-plots\n\n\n\n\nShow the code\np1 + p2\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\n(p1 / p2) | p3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.4.2 patchwork operators & extra functionalities\n\nWith tagsLayeringThemed\n\n\nAuto-tagging capabilities can be done by using plot_annotation() (eg. numbering the figures automatically).\n\n\nShow the code\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist() +\n  theme(plot.title = element_text(size = 12, face = \"bold\")) # Needs this or the font is too large for the plot",
    "crumbs": [
      "Week 02"
    ]
  },
  {
    "objectID": "hands-on/week02.html#extras",
    "href": "hands-on/week02.html#extras",
    "title": "Week 02 - Beyond ggplot2 Fundamentals",
    "section": "2.5 EXTRAS",
    "text": "2.5 EXTRAS\nTODO",
    "crumbs": [
      "Week 02"
    ]
  },
  {
    "objectID": "hands-on/week01.html",
    "href": "hands-on/week01.html",
    "title": "Week 01 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "The following content is created by following the tutorial on this chapter.\n\npacman::p_load(tidyverse)\n\nexam_data &lt;- read_csv(\"../data/Exam_data.csv\")\n\n\n\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS, xlab=\"Math Score\", main=\"Distribution of Math Scores\")\n\n\n\n\n\n\n\n\n\n\n\n# ggplot(data=df) will just display an empty canvas.\n# setting aes(x=MATHS) just sets the x-axis to the range of values in the MATHS column\n# using geom_histogram \nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10,\n                 boundary=100,\n                 color=\"black\",\n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Math Scores\")",
    "crumbs": [
      "Week 01"
    ]
  },
  {
    "objectID": "hands-on/week01.html#introduction",
    "href": "hands-on/week01.html#introduction",
    "title": "Week 01 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "The following content is created by following the tutorial on this chapter.\n\npacman::p_load(tidyverse)\n\nexam_data &lt;- read_csv(\"../data/Exam_data.csv\")\n\n\n\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS, xlab=\"Math Score\", main=\"Distribution of Math Scores\")\n\n\n\n\n\n\n\n\n\n\n\n# ggplot(data=df) will just display an empty canvas.\n# setting aes(x=MATHS) just sets the x-axis to the range of values in the MATHS column\n# using geom_histogram \nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10,\n                 boundary=100,\n                 color=\"black\",\n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Math Scores\")",
    "crumbs": [
      "Week 01"
    ]
  },
  {
    "objectID": "hands-on/week01.html#geometric-objects-in-ggplot2-geom",
    "href": "hands-on/week01.html#geometric-objects-in-ggplot2-geom",
    "title": "Week 01 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.2 Geometric Objects in ggplot2: geom",
    "text": "1.2 Geometric Objects in ggplot2: geom\n\n1.2.1 Bar chart with geom_bar()\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n1.2.2 Dot plot with geom_dotplot()\nNot be confused with scatterplots, a dot plot is essentially a histogram but in the style of stacked dots.\n\nggplot(data=exam_data, \n       aes(x=MATHS)) +\n  geom_dotplot(dotsize=0.5)\n\n\n\n\n\n\n\n\nBecause the y-axis scale is misleading, we will have to turn off y-axis with the scale_y_continuous()\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_dotplot(binwidth=2.5,\n               dotsize=0.5) +\n  scale_y_continuous(NULL, breaks=NULL)\n\n\n\n\n\n\n\n\nQuestion: When is a dot plot preferred over something like a histogram? Is counting the dots even feasible?\n\n\n1.2.3 Histograms with geom_histogram()\n\n# default number of bins is 30\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram()\n\n\n\n\n\n\n\n\nIn the geom(), we can use the arguments to modify the geometric object.\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\nSimilar to hue in seaborn, we can colour the histogram by sub-groups using the fill argument in aesthetic(). We can also play around with the other arguments like alpha and color.\n\nfillalphacolor\n\n\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           fill=GENDER)) +\n  geom_histogram(bins=20,\n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\n\n# Can't use it on continuous variables either even though there's the warning.\n# It's very difficult to see.\nggplot(data=exam_data,\n       aes(x=MATHS,\n           alpha=CLASS)) +\n  geom_histogram(bins=20,\n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\nThe color argument in the geom_histogram() needs to be removed as it will override the previous aes()\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           color=GENDER)) +\n  geom_histogram(bins=20,\n                 alpha=0.3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.2.4 Kernel Density Estimate with geom_density()\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_density()\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           color=GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\n1.2.5 Boxplot with geom_boxplot()\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n# notches are used to see if medians of the distributions differ\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_boxplot(notches=TRUE) # TRUE must be all caps\n\n\n\n\n\n\n\n\n\n\n1.2.6 Violin plot with geom_violin()\nThis is for comparing multiple data distributions side by side. With density curves, as the lines may overlap with one another, it is more challenging to compare the different distributions.\n\nggplot(data=exam_data, \n       aes(y=MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\n1.2.7 Scatterplot with geom_point()\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n1.2.8 Combining geom objects\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_boxplot() +\n  geom_point(position=\"jitter\",\n             size=0.5)",
    "crumbs": [
      "Week 01"
    ]
  },
  {
    "objectID": "hands-on/week01.html#statistics-functions-in-ggplot2-stat",
    "href": "hands-on/week01.html#statistics-functions-in-ggplot2-stat",
    "title": "Week 01 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.3 Statistics functions in ggplot2: stat",
    "text": "1.3 Statistics functions in ggplot2: stat\n\n1.3.1 Using the stat_summary() method\nThe box plot above doesn’t indicate the position of the means. By working with the stat_summary() function, we can indicate the mean values on the plot.\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom=\"point\",\n                fun=\"mean\",\n                colour=\"red\",\n                size=4)\n\n\n\n\n\n\n\n\n\n\n1.3.2 Using geom() to update stat\nOverriding the default stat, we can add the mean values as well.\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",\n             fun=\"mean\",\n             colour=\"red\",\n             size=4)\n\n\n\n\n\n\n\n\n\n\n1.3.3 Using geom_smooth() to add best fit curve\n\nloesslm\n\n\n\nggplot(data=exam_data, \n       aes(x=MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(linewidth=0.5)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              linewidth=0.5)",
    "crumbs": [
      "Week 01"
    ]
  },
  {
    "objectID": "hands-on/week01.html#facets",
    "href": "hands-on/week01.html#facets",
    "title": "Week 01 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.4 Facets",
    "text": "1.4 Facets\nAlso known as trellis plot. In mpl it’s subplots.\n\n1.4.1 Wrapping 1d sequence of panels into 2d with facet_wrap()\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n1.4.2 Creating matrix of panels with facet_grid()\n\n# This should be similar to subplots\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)",
    "crumbs": [
      "Week 01"
    ]
  },
  {
    "objectID": "hands-on/week01.html#coordinates",
    "href": "hands-on/week01.html#coordinates",
    "title": "Week 01 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.5 Coordinates",
    "text": "1.5 Coordinates\n\n1.5.1 Flipping the coordinates with coord_flip()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n1.5.2 Changing the y- and x-axis range with coord_cartesian()\n\nggplot(data=exam_data, \n       aes(x=MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))",
    "crumbs": [
      "Week 01"
    ]
  },
  {
    "objectID": "hands-on/week01.html#themes",
    "href": "hands-on/week01.html#themes",
    "title": "Week 01 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.6 Themes",
    "text": "1.6 Themes\n\nList of built-in themes\n\n\n1.6.1 Examples of different themes\n\ntheme_gray()theme_classic()theme_minimal()\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()",
    "crumbs": [
      "Week 01"
    ]
  },
  {
    "objectID": "hands-on/week01.html#additional-plots",
    "href": "hands-on/week01.html#additional-plots",
    "title": "Week 01 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7 Additional Plots",
    "text": "1.7 Additional Plots\nThis space is for more exploration regarding this week’s extra topics. It may be done later when I have time to revise.\n\n1.7.1 Age-sex Pyramid\nData Retrieved From Singstat\n\n\nShow the code\n# Referenced from https://www.geeksforgeeks.org/how-to-create-a-population-pyramid-in-r/\npop_data &lt;- read_csv(\"../data/sg_residents_jun2024.csv\")\n\n# This is to ensure that the age levels are sorted correctly\nage_levels &lt;- pop_data %&gt;%\n  distinct(age) %&gt;%\n  pull(age) %&gt;%\n  str_replace(\" Years\", \"\")\n  \npop_data &lt;- pop_data %&gt;%\n  mutate(age = factor(str_replace(age, \" Years\", \"\"), levels = age_levels))\n\n# Plotting the age-sex pyramid\npop_data %&gt;%mutate( \n    population = ifelse(gender==\"M\", population*(-1e-3), \n                        population*1e-3))%&gt;% \n    ggplot(aes(x = age, \n               y = population, \n               fill = gender)) +  \n    geom_bar(stat = \"identity\") + \n    coord_flip() + \n    scale_y_continuous(limits = c(-200,200),  \n                       breaks = seq(-200, 200, by = 50))+\n   labs(title = \"Singapore Residents\", x = \"Age Range\",  \n        y = \"Population (in thousands)\") +\n  theme_light() +\n  theme(axis.ticks.y=element_blank())\n\n\n\n\n\n\n\n\n\n\n\n1.7.2 Pareto Chart\nData Retrieved From Singstat\n\n\nShow the code\npacman::p_load(scales)\n\nexp_data &lt;- read_csv(\"../data/avg_monthly_expenditure2023.csv\")\n\npareto_data &lt;- exp_data %&gt;%\n  mutate (\n    category_wrapped = str_wrap(category, width = 8)\n  ) %&gt;% \n  arrange(desc(avg_spend)) %&gt;%  # Sort by avg_spend in descending order\n  mutate(\n    category_wrapped = factor(category_wrapped, levels = category_wrapped),  # Fix category order\n    cum_percent = cumsum(avg_spend) / sum(avg_spend) * 100)  # Calculate cumulative percentage\n\n\n# Create the Pareto chart\nggplot(pareto_data, aes(x = category_wrapped)) +\n  geom_bar(aes(y = avg_spend), stat = \"identity\", fill = \"steelblue\") +\n  geom_line(aes(y = cum_percent * max(avg_spend) / 100, \n                group = 1), color = \"red\", \n            size = 1) +\n  geom_point(aes(y = cum_percent * max(avg_spend) / 100), \n             color = \"red\", size = 2) +\n  scale_y_continuous(\n    name = \"Average Monthly HouseHold Expenditure (SGD)\", \n    sec.axis = sec_axis(~ . * 100 / max(pareto_data$avg_spend),\n                        breaks = seq(0, 100, by = 20),\n                        labels = percent_format(scale = 1))) +\n  labs(\n    title = \"Average Monthly Household Expenditure by Goods and Services Type (2023)\",\n    x = \"Type of Goods and Services\",\n    y = \"Average Monthly HouseHold Expenditure (SGD)\"\n  ) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(size = 6)) \n\n\n\n\n\n\n\n\n\nThis Pareto chart shows the average monthly household expenditure in Singapore for 2023, offering insights into spending priorities. Key areas like “Housing and Utilities,” “Food and Food Serving Services,” and “Transport” form the bulk of household expenses. However, it’s worth noting that the data is self-reported, as outlined in the Household Expenditure Survey 2022/23 (SingStat). Additionally, this analysis isn’t normalized by household size or segmented by income levels, which could mask inequalities across different demographics.\nFor a deeper dive, the full report and related publications are available on SingStat’s website (here). This serves as a starting point for exploring how households allocate resources, but there’s room to uncover more patterns with richer, disaggregated data.",
    "crumbs": [
      "Week 01"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Analytics Journey",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics And Applications.\nChanges"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Learning journey and deliverables of ISSS608"
  },
  {
    "objectID": "hands-on/week03.html",
    "href": "hands-on/week03.html",
    "title": "Week 03 - Interactivity and Animation",
    "section": "",
    "text": "The following content is created by following the tutorial on this chapter. These are the R packages that are needed for plotting interactive graphs.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)\n\n\n\nImporting data\nexam_data &lt;- read_csv(\"../data/Exam_data.csv\")\n\n\n\n\n\n\n\n\nUsing tooltipCustomizing tooltip contentCustomizing tooltip style\n\n\nThe code chunk below will generate a dotplot that is interactive such that by hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\nShow the code\n# Step 1: Create an interactive version of ggplot2 geom.\np &lt;- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),  # Here's the tooltip\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\n# Step 2: Generate an svg object to be displayed on an html page.\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\nHover over the data point and the tooltip will display the ID and Class of the student, instead of just the student ID in the previous tab.\n\n\nShow the code\n# Step 1: Creating a new column in the dataset to incorporate the tool tip information\nexam_data$tooltip &lt;- c(paste0(\n  \"Name = \", exam_data$ID,\n  \"\\n Class = \", exam_data$CLASS\n))\n\n# Step 2: Create an interactive version of ggplot2 geom.\np &lt;- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip),  # Here's the tooltip\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\n# Step 3: Generate an svg object to be displayed on an html page.\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\nThis changes the tooltip from a black background + white text to a white background + black, bold text.\n\n\nShow the code\n# Step 1: Define tooltip CSS style\ntooltip_css &lt;- \"background-color:white;\nfont-style:bold; color:black;\"\n\n# Step 2: Create an interactive version of ggplot2 geom.\np &lt;- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),  # Here's the tooltip\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\n# Step 3: Generate an svg object to be displayed on an html page.\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(  \n    opts_tooltip(\n      css = tooltip_css  # The tooltip css is incorporated here\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\nThe code chunk below is an example of customizing the tooltip to show the 90% confidence interval.\n\n\nShow the code\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data = exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\n\n\nHover effectStyling hover effect\n\n\nElements associated with the data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\nShow the code\np &lt;- ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),   # Here is the data_id          \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)         \n\n\n\n\n\n\n\n\nThe css codes are used to change the highlighting effect.\n\n\nShow the code\np &lt;- ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  # The elements associated with the data_id\n    opts_hover_inv(css = \"opacity:0.2;\")  # The ones that are not highlighted\n  )                                        \n)            \n\n\n\n\n\n\n\n\n\nThe code chunk below combines what we have learnt so far - the tooltip + hover effect.\n\n\nShow the code\np &lt;- ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)            \n\n\n\n\n\n\n\n\n\nThe onclick argument of ggiraph provides hotlink interactivity on the web. The web document link with a data object will be displayed on the web browser upon mouse click.\n\n\nShow the code\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)   \n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions.\n\n\n\n\n\nCoordinated multiple views methods has been implemented in the data visualisation below. When a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too. The steps will be annotated in the code chunk.\n\n\nShow the code\n# Step 1: Plot the first figure\np1 &lt;- ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID,\n        tooltip = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim = c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\n# Step 2: Plot the second figure\np2 &lt;- ggplot(data = exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID,\n        tooltip = ID),        \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim = c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\n# Step 3: Display the svg object. The code argument runs the patchwork function to create the coordinated multiple views.\ngirafe(code = print(p1 + p2),  # print is needed for the plot to display\n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\n\n\n\n\nLast week, we learnt to use the ggrepel to prevent overlapping text labels here. However, the plot was still overwhelming.\n\nWith ggrepelUsing hover instead\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              linewidth = 0.5) +  \n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\np &lt;- ggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point_interactive(\n    aes(tooltip = ID)\n  ) +\n  geom_smooth(method = lm, \n              linewidth = 0.5) +  \n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\ngirafe(                                  \n  ggobj = p) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefaultUsing color\n\n\nWith just three lines of code, we can plot a basic interactive plot.\n\nplot_ly(data = exam_data, \n        x = ~MATHS, \n        y = ~ENGLISH)\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~MATHS, \n        y = ~ENGLISH,\n        color = ~RACE)\n\n\n\n\n\n\n\n\n\n\n\nTo create an interactive scatterplot, all we need to do is to wrap the figure using ggplotly().\n\n\nShow the code\np &lt;- ggplot(data = exam_data,\n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0, 100),\n                  ylim = c(0, 100))\n\nggplotly(p)\n\n\n\n\n\n\n\n\n\nExpand on the code chunk to see the steps needed to create this plot.\n\n\nShow the code\n# Step 1: Using highlight_key function from plotly package to indicate the shared data\n# This creates an object of class crosstalk::SharedData\nd &lt;- highlight_key(exam_data)\n\n# Step 2: Create both the scatterplots\np1 &lt;- ggplot(data = d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data = d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n# Step 3: Using subplot to place them side-by-side\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\nOn combining multiple views, refer to this link to learn more.\n\n\n\n\nThe DT::datatable can be used to render the data objects in R as HTML tables. The interactive table can then be combined with the ggplot graphics using crosstalk. The code chunk below is used to implement the coordinated brushing shown.\n\n\nShow the code\n# Step 1: Indicate shared data\nd &lt;- highlight_key(exam_data) \n\n# Step 2: Define the ggplot graphic\np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n# Step 3: Using the plotly highlight function\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\n# Step 4: Putting HTML elements side by side.\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe visual analytics method of the week is scatterplot with marginal distribution, we will be exploring methods to create this plot. The following code blocks has content that was generated with the help of LLMs.\n\n\nAs we have learnt patchwork here, I will be using patchwork to combine the plots together. The method that will be introduced here will be plot_spacer(), which will creates an empty transparent patch that can be added to push your other plots apart. Reference.\n\n\nShow the code\n# Scatter plot\nscatter_plot &lt;- ggplot(data = exam_data, \n                       aes(x = MATHS, y = ENGLISH)) +\n  geom_point(alpha = 0.8) +\n  theme_minimal() +\n  labs(title = \"Scatter Plot with Marginal Density Plots\",\n       x = \"Maths Score\",\n       y = \"English Score\")\n\n# Marginal density plot for x-axis (MATHS)\ndensity_x &lt;- ggplot(data = exam_data, \n                    aes(x = MATHS)) +\n  geom_density(fill = \"gray\", alpha = 0.6) +\n  theme_minimal() +\n  theme(axis.title.x = element_blank(),\n        axis.text.x = element_blank(),\n        axis.ticks.x = element_blank())\n\n# Marginal density plot for y-axis (ENGLISH)\ndensity_y &lt;- ggplot(data = exam_data, \n                    aes(x = ENGLISH)) +\n  geom_density(fill = \"gray\", alpha = 0.6) +\n  coord_flip() +  # Flip to make it vertical\n  theme_minimal() +\n  theme(axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.y = element_blank())\n\n# Combine plots using patchwork\ncombined_plot &lt;- density_x + \n  plot_spacer() +  # Empty space\n  scatter_plot + \n  density_y +\n  plot_layout(ncol = 2, widths = c(4, 1), heights = c(1, 4))\n\n# Display the combined plot\ncombined_plot\n\n\n\n\n\n\n\n\n\n\n\n\nThere’s another library that helps to add marginal distributions to the X and Y axis of a ggplot scatterplot. As you’ve seen, using patchwork requires a lengthy code. With the ggMarginal() wrapper, we will be able to shorten the code and still get a similar plot. Reference\n\npacman::p_load(ggExtra)\n\n\nDensityHistogramBoxplot\n\n\n\n\nShow the code\n# Step 1: Create scatter plot\nscatter_plot &lt;- ggplot(data = exam_data, \n                       aes(x = MATHS, y = ENGLISH)) +\n  geom_point(alpha = 0.8) +\n  theme_minimal() +\n  labs(title = \"Scatter Plot with Marginal Density Plots\",\n       x = \"Maths Score\",\n       y = \"English Score\")\n\n# Step 2: Add marginal density plots\nggMarginal(scatter_plot,\n           type = \"density\",\n           fill = \"gray\",\n           alpha = 0.6,\n           color = \"black\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\n# Step 1: Create scatter plot\nscatter_plot &lt;- ggplot(data = exam_data, \n                       aes(x = MATHS, y = ENGLISH)) +\n  geom_point(alpha = 0.8) +\n  theme_minimal() +\n  labs(title = \"Scatter Plot with Marginal Density Plots\",\n       x = \"Maths Score\",\n       y = \"English Score\")\n\n# Step 2: Add marginal density plots\nggMarginal(scatter_plot, \n           type = \"histogram\",\n           color = \"black\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\n# Step 1: Create scatter plot\nscatter_plot &lt;- ggplot(data = exam_data, \n                       aes(x = MATHS, y = ENGLISH)) +\n  geom_point(alpha = 0.8) +\n  theme_minimal() +\n  labs(title = \"Scatter Plot with Marginal Density Plots\",\n       x = \"Maths Score\",\n       y = \"English Score\")\n\n# Step 2: Add marginal density plots\nggMarginal(scatter_plot, \n           type =\"boxplot\", \n           color = \"black\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nI tried to combine the plotly with ggExtra but because ggMarginal() returns an object of class “ggExtraPlot”, it is not directly compatible with ggplotly(). We will use the patchwork approach instead.\n\n\nShow the code\n# Scatter plot\nscatter_plot &lt;- ggplot(data = exam_data, \n                       aes(x = MATHS, \n                           y = ENGLISH,\n                           text = paste(\"Student\", ID,\n                                        \"&lt;br&gt;Maths: \", MATHS, \n                                        \"&lt;br&gt;English: \", ENGLISH))) +\n  geom_point(alpha = 0.8) +\n  theme_minimal() +\n  labs(title = \"Scatter Plot with Marginal Density Plots\",\n       x = \"Maths Score\",\n       y = \"English Score\")\n\n# Marginal density plot for x-axis (MATHS)\ndensity_x &lt;- ggplot(data = exam_data, \n                    aes(x = MATHS)) +\n  geom_density(fill = \"gray\", alpha = 0.6) +\n  theme_minimal() +\n  theme(axis.title.x = element_blank(),\n        axis.text.x = element_blank(),\n        axis.ticks.x = element_blank())\n\n# Marginal density plot for y-axis (ENGLISH)\ndensity_y &lt;- ggplot(data = exam_data, \n                    aes(x = ENGLISH)) +\n  geom_density(fill = \"gray\", alpha = 0.6) +\n  coord_flip() +  # Flip to make it vertical\n  theme_minimal() +\n  theme(axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.y = element_blank())\n\ninteractive_scatter &lt;- ggplotly(scatter_plot, tooltip = \"text\")\n\n# Convert marginal plots to plotly\ninteractive_x_density &lt;- ggplotly(density_x) %&gt;% hide_legend() \ninteractive_y_density &lt;- ggplotly(density_y) %&gt;% hide_legend()\n\n# Step 3: Arrange all plots together using subplot\nfinal_plot &lt;- subplot(\n  interactive_x_density, \n  plot_spacer(),\n  interactive_scatter, \n  interactive_y_density,\n  nrows = 2, heights = c(0.2, 0.8), widths = c(0.8, 0.2),\n  shareX = TRUE, shareY = TRUE\n)\n\nfinal_plot",
    "crumbs": [
      "Week 03"
    ]
  },
  {
    "objectID": "hands-on/week03.html#introduction",
    "href": "hands-on/week03.html#introduction",
    "title": "Week 03 - Interactivity and Animation",
    "section": "",
    "text": "The following content is created by following the tutorial on this chapter. These are the R packages that are needed for plotting interactive graphs.\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)\n\n\n\nImporting data\nexam_data &lt;- read_csv(\"../data/Exam_data.csv\")",
    "crumbs": [
      "Week 03"
    ]
  },
  {
    "objectID": "hands-on/week03.html#interactivity-with-ggiraph",
    "href": "hands-on/week03.html#interactivity-with-ggiraph",
    "title": "Week 03 - Interactivity and Animation",
    "section": "",
    "text": "Using tooltipCustomizing tooltip contentCustomizing tooltip style\n\n\nThe code chunk below will generate a dotplot that is interactive such that by hovering the mouse pointer on an data point of interest, the student’s ID will be displayed.\n\n\nShow the code\n# Step 1: Create an interactive version of ggplot2 geom.\np &lt;- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),  # Here's the tooltip\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\n# Step 2: Generate an svg object to be displayed on an html page.\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\nHover over the data point and the tooltip will display the ID and Class of the student, instead of just the student ID in the previous tab.\n\n\nShow the code\n# Step 1: Creating a new column in the dataset to incorporate the tool tip information\nexam_data$tooltip &lt;- c(paste0(\n  \"Name = \", exam_data$ID,\n  \"\\n Class = \", exam_data$CLASS\n))\n\n# Step 2: Create an interactive version of ggplot2 geom.\np &lt;- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip),  # Here's the tooltip\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\n# Step 3: Generate an svg object to be displayed on an html page.\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\nThis changes the tooltip from a black background + white text to a white background + black, bold text.\n\n\nShow the code\n# Step 1: Define tooltip CSS style\ntooltip_css &lt;- \"background-color:white;\nfont-style:bold; color:black;\"\n\n# Step 2: Create an interactive version of ggplot2 geom.\np &lt;- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),  # Here's the tooltip\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\n# Step 3: Generate an svg object to be displayed on an html page.\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(  \n    opts_tooltip(\n      css = tooltip_css  # The tooltip css is incorporated here\n    )\n  )\n)\n\n\n\n\n\n\n\n\n\nThe code chunk below is an example of customizing the tooltip to show the 90% confidence interval.\n\n\nShow the code\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data = exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\n\n\nHover effectStyling hover effect\n\n\nElements associated with the data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\nShow the code\np &lt;- ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),   # Here is the data_id          \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)         \n\n\n\n\n\n\n\n\nThe css codes are used to change the highlighting effect.\n\n\nShow the code\np &lt;- ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  # The elements associated with the data_id\n    opts_hover_inv(css = \"opacity:0.2;\")  # The ones that are not highlighted\n  )                                        \n)            \n\n\n\n\n\n\n\n\n\nThe code chunk below combines what we have learnt so far - the tooltip + hover effect.\n\n\nShow the code\np &lt;- ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)            \n\n\n\n\n\n\n\n\n\nThe onclick argument of ggiraph provides hotlink interactivity on the web. The web document link with a data object will be displayed on the web browser upon mouse click.\n\n\nShow the code\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)   \n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions.\n\n\n\n\n\nCoordinated multiple views methods has been implemented in the data visualisation below. When a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too. The steps will be annotated in the code chunk.\n\n\nShow the code\n# Step 1: Plot the first figure\np1 &lt;- ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID,\n        tooltip = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim = c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\n# Step 2: Plot the second figure\np2 &lt;- ggplot(data = exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID,\n        tooltip = ID),        \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim = c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\n# Step 3: Display the svg object. The code argument runs the patchwork function to create the coordinated multiple views.\ngirafe(code = print(p1 + p2),  # print is needed for the plot to display\n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\n\n\n\n\nLast week, we learnt to use the ggrepel to prevent overlapping text labels here. However, the plot was still overwhelming.\n\nWith ggrepelUsing hover instead\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              linewidth = 0.5) +  \n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\np &lt;- ggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point_interactive(\n    aes(tooltip = ID)\n  ) +\n  geom_smooth(method = lm, \n              linewidth = 0.5) +  \n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\ngirafe(                                  \n  ggobj = p)",
    "crumbs": [
      "Week 03"
    ]
  },
  {
    "objectID": "hands-on/week03.html#interactivity-with-plotly",
    "href": "hands-on/week03.html#interactivity-with-plotly",
    "title": "Week 03 - Interactivity and Animation",
    "section": "",
    "text": "DefaultUsing color\n\n\nWith just three lines of code, we can plot a basic interactive plot.\n\nplot_ly(data = exam_data, \n        x = ~MATHS, \n        y = ~ENGLISH)\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~MATHS, \n        y = ~ENGLISH,\n        color = ~RACE)\n\n\n\n\n\n\n\n\n\n\n\nTo create an interactive scatterplot, all we need to do is to wrap the figure using ggplotly().\n\n\nShow the code\np &lt;- ggplot(data = exam_data,\n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0, 100),\n                  ylim = c(0, 100))\n\nggplotly(p)\n\n\n\n\n\n\n\n\n\nExpand on the code chunk to see the steps needed to create this plot.\n\n\nShow the code\n# Step 1: Using highlight_key function from plotly package to indicate the shared data\n# This creates an object of class crosstalk::SharedData\nd &lt;- highlight_key(exam_data)\n\n# Step 2: Create both the scatterplots\np1 &lt;- ggplot(data = d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data = d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n# Step 3: Using subplot to place them side-by-side\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\nOn combining multiple views, refer to this link to learn more.",
    "crumbs": [
      "Week 03"
    ]
  },
  {
    "objectID": "hands-on/week03.html#interactivity-with-crosstalk",
    "href": "hands-on/week03.html#interactivity-with-crosstalk",
    "title": "Week 03 - Interactivity and Animation",
    "section": "",
    "text": "The DT::datatable can be used to render the data objects in R as HTML tables. The interactive table can then be combined with the ggplot graphics using crosstalk. The code chunk below is used to implement the coordinated brushing shown.\n\n\nShow the code\n# Step 1: Indicate shared data\nd &lt;- highlight_key(exam_data) \n\n# Step 2: Define the ggplot graphic\np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n# Step 3: Using the plotly highlight function\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\n# Step 4: Putting HTML elements side by side.\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)",
    "crumbs": [
      "Week 03"
    ]
  },
  {
    "objectID": "hands-on/week03.html#extra-scatterplot-with-marginal-distribution",
    "href": "hands-on/week03.html#extra-scatterplot-with-marginal-distribution",
    "title": "Week 03 - Interactivity and Animation",
    "section": "",
    "text": "The visual analytics method of the week is scatterplot with marginal distribution, we will be exploring methods to create this plot. The following code blocks has content that was generated with the help of LLMs.\n\n\nAs we have learnt patchwork here, I will be using patchwork to combine the plots together. The method that will be introduced here will be plot_spacer(), which will creates an empty transparent patch that can be added to push your other plots apart. Reference.\n\n\nShow the code\n# Scatter plot\nscatter_plot &lt;- ggplot(data = exam_data, \n                       aes(x = MATHS, y = ENGLISH)) +\n  geom_point(alpha = 0.8) +\n  theme_minimal() +\n  labs(title = \"Scatter Plot with Marginal Density Plots\",\n       x = \"Maths Score\",\n       y = \"English Score\")\n\n# Marginal density plot for x-axis (MATHS)\ndensity_x &lt;- ggplot(data = exam_data, \n                    aes(x = MATHS)) +\n  geom_density(fill = \"gray\", alpha = 0.6) +\n  theme_minimal() +\n  theme(axis.title.x = element_blank(),\n        axis.text.x = element_blank(),\n        axis.ticks.x = element_blank())\n\n# Marginal density plot for y-axis (ENGLISH)\ndensity_y &lt;- ggplot(data = exam_data, \n                    aes(x = ENGLISH)) +\n  geom_density(fill = \"gray\", alpha = 0.6) +\n  coord_flip() +  # Flip to make it vertical\n  theme_minimal() +\n  theme(axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.y = element_blank())\n\n# Combine plots using patchwork\ncombined_plot &lt;- density_x + \n  plot_spacer() +  # Empty space\n  scatter_plot + \n  density_y +\n  plot_layout(ncol = 2, widths = c(4, 1), heights = c(1, 4))\n\n# Display the combined plot\ncombined_plot\n\n\n\n\n\n\n\n\n\n\n\n\nThere’s another library that helps to add marginal distributions to the X and Y axis of a ggplot scatterplot. As you’ve seen, using patchwork requires a lengthy code. With the ggMarginal() wrapper, we will be able to shorten the code and still get a similar plot. Reference\n\npacman::p_load(ggExtra)\n\n\nDensityHistogramBoxplot\n\n\n\n\nShow the code\n# Step 1: Create scatter plot\nscatter_plot &lt;- ggplot(data = exam_data, \n                       aes(x = MATHS, y = ENGLISH)) +\n  geom_point(alpha = 0.8) +\n  theme_minimal() +\n  labs(title = \"Scatter Plot with Marginal Density Plots\",\n       x = \"Maths Score\",\n       y = \"English Score\")\n\n# Step 2: Add marginal density plots\nggMarginal(scatter_plot,\n           type = \"density\",\n           fill = \"gray\",\n           alpha = 0.6,\n           color = \"black\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\n# Step 1: Create scatter plot\nscatter_plot &lt;- ggplot(data = exam_data, \n                       aes(x = MATHS, y = ENGLISH)) +\n  geom_point(alpha = 0.8) +\n  theme_minimal() +\n  labs(title = \"Scatter Plot with Marginal Density Plots\",\n       x = \"Maths Score\",\n       y = \"English Score\")\n\n# Step 2: Add marginal density plots\nggMarginal(scatter_plot, \n           type = \"histogram\",\n           color = \"black\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\n# Step 1: Create scatter plot\nscatter_plot &lt;- ggplot(data = exam_data, \n                       aes(x = MATHS, y = ENGLISH)) +\n  geom_point(alpha = 0.8) +\n  theme_minimal() +\n  labs(title = \"Scatter Plot with Marginal Density Plots\",\n       x = \"Maths Score\",\n       y = \"English Score\")\n\n# Step 2: Add marginal density plots\nggMarginal(scatter_plot, \n           type =\"boxplot\", \n           color = \"black\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nI tried to combine the plotly with ggExtra but because ggMarginal() returns an object of class “ggExtraPlot”, it is not directly compatible with ggplotly(). We will use the patchwork approach instead.\n\n\nShow the code\n# Scatter plot\nscatter_plot &lt;- ggplot(data = exam_data, \n                       aes(x = MATHS, \n                           y = ENGLISH,\n                           text = paste(\"Student\", ID,\n                                        \"&lt;br&gt;Maths: \", MATHS, \n                                        \"&lt;br&gt;English: \", ENGLISH))) +\n  geom_point(alpha = 0.8) +\n  theme_minimal() +\n  labs(title = \"Scatter Plot with Marginal Density Plots\",\n       x = \"Maths Score\",\n       y = \"English Score\")\n\n# Marginal density plot for x-axis (MATHS)\ndensity_x &lt;- ggplot(data = exam_data, \n                    aes(x = MATHS)) +\n  geom_density(fill = \"gray\", alpha = 0.6) +\n  theme_minimal() +\n  theme(axis.title.x = element_blank(),\n        axis.text.x = element_blank(),\n        axis.ticks.x = element_blank())\n\n# Marginal density plot for y-axis (ENGLISH)\ndensity_y &lt;- ggplot(data = exam_data, \n                    aes(x = ENGLISH)) +\n  geom_density(fill = \"gray\", alpha = 0.6) +\n  coord_flip() +  # Flip to make it vertical\n  theme_minimal() +\n  theme(axis.title.y = element_blank(),\n        axis.text.y = element_blank(),\n        axis.ticks.y = element_blank())\n\ninteractive_scatter &lt;- ggplotly(scatter_plot, tooltip = \"text\")\n\n# Convert marginal plots to plotly\ninteractive_x_density &lt;- ggplotly(density_x) %&gt;% hide_legend() \ninteractive_y_density &lt;- ggplotly(density_y) %&gt;% hide_legend()\n\n# Step 3: Arrange all plots together using subplot\nfinal_plot &lt;- subplot(\n  interactive_x_density, \n  plot_spacer(),\n  interactive_scatter, \n  interactive_y_density,\n  nrows = 2, heights = c(0.2, 0.8), widths = c(0.8, 0.2),\n  shareX = TRUE, shareY = TRUE\n)\n\nfinal_plot",
    "crumbs": [
      "Week 03"
    ]
  },
  {
    "objectID": "hands-on/week03.html#introduction-1",
    "href": "hands-on/week03.html#introduction-1",
    "title": "Week 03 - Interactivity and Animation",
    "section": "4.1 Introduction",
    "text": "4.1 Introduction\nThe basic concepts of animation and the terminologies are covered in the chapter here. For me, the two key takeaways are:\n\nWhat We Can Do with Animated Graphics  Animated graphics help create engaging and impactful data visualizations by showing changes over time or across categories. They are built by stitching together multiple frames, much like a flipbook, using tools like gganimate and plotly in R. Additionally, data reshaping (tidyr) and transformation (dplyr) are essential for preparing data for animation. Animation attributes, such as frame duration and easing functions, allow further customization of how the animation flows.\nWhen to Use Animated Graphics  Animated graphics are most effective in presentations or storytelling when visualizing trends or patterns over time. Their ability to guide audience attention makes them more engaging than static visuals. However, they may not be necessary for exploratory data analysis, where static charts might suffice. Always consider whether animation adds value before investing time in creating it.\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\nImporting data\n# Step 1: Select the columns to be converted into factor (levels)\ncol &lt;- c(\"Country\", \"Continent\")\n\n# Step 2: Read xls from readxl to import excel worksheet\n# Step 3: Piping the operators together, using mutate_at & mutate for datatype conversion\nglobalPop &lt;- read_xls(\"../data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%  # mutate(across(col, as.factor)) can also be used\n  mutate(Year = as.integer(Year))",
    "crumbs": [
      "Week 03"
    ]
  },
  {
    "objectID": "hands-on/week03.html#animated-data-visualisation-gganimate-methods",
    "href": "hands-on/week03.html#animated-data-visualisation-gganimate-methods",
    "title": "Week 03 - Interactivity and Animation",
    "section": "4.2 Animated Data Visualisation: gganimate methods",
    "text": "4.2 Animated Data Visualisation: gganimate methods\n\nStaticAnimated\n\n\n\n\nShow the code\nggplot(data = globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +  # Transition through distinct states in time   \n  ease_aes('linear')  # Control of easing of aesthetics",
    "crumbs": [
      "Week 03"
    ]
  },
  {
    "objectID": "hands-on/week03.html#animated-data-visualisation-plotly",
    "href": "hands-on/week03.html#animated-data-visualisation-plotly",
    "title": "Week 03 - Interactivity and Animation",
    "section": "4.3 Animated Data Visualisation: plotly",
    "text": "4.3 Animated Data Visualisation: plotly\n\n4.3.1 Animated bubble plot with ggplotly() method\n\nDefaultRemoving the legend\n\n\n\n\nShow the code\ngg &lt;- ggplot(data = globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +  # The legend is still displayed\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\nThe animated bubble plot above includes a play/pause button and a slider component for controlling the animation.\n\n\nAlthough show.legend = FALSE argument was used in the default plot, the legend still appears.. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\n\nShow the code\ngg &lt;- ggplot(data = globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') +\n  theme(legend.position = 'none')\n\nggplotly(gg)\n\n\n\n\n\n\n\n\n\n\n\n4.3.2 Animated bubble plot with plot_ly() method\n\n\nShow the code\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers') %&gt;%\n  layout(showlegend = FALSE)\nbp",
    "crumbs": [
      "Week 03"
    ]
  },
  {
    "objectID": "hands-on/week04.html",
    "href": "hands-on/week04.html",
    "title": "Week 04 - Fundamentals of Visualization Analytics",
    "section": "",
    "text": "The following section was modified according to https://r4va.netlify.app/chap09.\n\n\nLoading packages & data import\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\nexam_data &lt;- read_csv(\"../data/Exam_data.csv\")\n\n\n\n\nWhen to Use Ridgeline Plots:\n\nWhen you have a medium to high number of groups (more than 5), as it saves space.\nIf there is a clear pattern or ranking among groups, making insights easier to spot.\nWhen you want to efficiently visualize distributions without using separate plots.\n\nWhen Not to Use Ridgeline Plots:\n\nIf there are fewer than 5 groups, other distribution plots (e.g., boxplots) may be better.\nWhen groups lack a clear pattern, as overlapping can make the plot messy.\nIf hiding some data due to overlap reduces clarity rather than improving visualization.\n\n\n\n\n\n\n\nTip\n\n\n\nAdjust bin size/bandwidth and order groups logically for better readability.\n\n\n\n\nThe rdocumentation is here.\n\nBinline-20Binline-40Density\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = ENGLISH, \n           y = CLASS,\n           height = after_stat(count))) +\n  geom_ridgeline(stat = \"binline\", \n                 bins = 20,\n                 scale = 0.9,\n                 alpha = 0.8) + \n  scale_x_continuous(\n    name = \"English grades\",\n    limits = c(0, 100),\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL,\n                   expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = ENGLISH, \n           y = CLASS,\n           height = after_stat(count))) +\n  geom_ridgeline(stat = \"binline\", \n                 bins = 40,\n                 scale = 0.9,\n                 alpha = 0.8) + \n  scale_x_continuous(\n    name = \"English grades\",\n    limits = c(0, 100),\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL,\n                   expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = ENGLISH, \n           y = CLASS,\n           height = after_stat(count))) +\n  geom_ridgeline(stat = \"density\",\n                 alpha = 0.8) + \n  scale_x_continuous(\n    name = \"English grades\",\n    limits = c(0, 100),\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL,\n                   expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"gray\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, \n                   expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefaultWith quantile lines\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    # alpha = 0.8,  # This is not allowed\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Score\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, \n                   expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = factor(stat(quantile)))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_d(name = \"Quartiles\") +  # d: discrete\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, \n                   expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTail ProbabilitySpecifying Cut Points\n\n\n\n\nShow the code\nggplot(data = exam_data,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1,\n                       option = \"magma\") +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile)))) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = RACE,\n           y = ENGLISH,\n           fill = RACE,\n           color = RACE)) +\n  stat_slab(adjust = 0.5,  # Bandwidth for density estimate; &lt; 1 more \"curvature\"\n            justification = -0.2,  # Without this the boxplot will overlap with the slab\n            scale = 0.5) +  # Used this to prevent overlapping with the dots from previous category\n  geom_boxplot(width = .10,\n               outlier.shape = NA,\n               alpha = 0.5) +\n    stat_dots(side = \"left\", \n            justification = 1.1, \n            # binwidth = .5, \n            dotsize = 2) +\n  coord_flip() +\n  theme_classic() +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nThe figure above shows a Raincloud Plot. A Raincloud Plot combines a half-density plot (slab) with a boxplot and dot plot, visually resembling a “raincloud.” It enhances traditional boxplots by showing density distribution and identifying multiple modalities (indicating potential subgroup patterns).\nWhen to Use\n\nBest for smaller datasets to avoid overcrowding.\nUseful for visualizing distribution patterns and density clusters.\nHighlights where data points are concentrated, unlike a standard boxplot.\n\n\n\n\n\n\n\nTip\n\n\n\nIf the dataset is large, consider removing the dot plot (“rain drops”) to avoid clutter.\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe don’t need to use half_eye plot and remove the “line & eye portion”, we can just directly use the slab plot. Refer to https://cran.r-project.org/web/packages/ggdist/vignettes/slabinterval.html.",
    "crumbs": [
      "Week 04"
    ]
  },
  {
    "objectID": "hands-on/week04.html#visualizing-distribution",
    "href": "hands-on/week04.html#visualizing-distribution",
    "title": "Week 04 - Visual Analytics",
    "section": "",
    "text": "The following section was modified according to https://r4va.netlify.app/chap09.\n\n\nLoading packages & data import\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\nexam_data &lt;- read_csv(\"../data/Exam_data.csv\")\n\n\n\n\nWhen to use & when not to use:  Ridgeline plots (also known as joyplots) make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than 5 groups, dealing with other distribution plots is probably better.\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\nAs with histogram or density plot, play with bin size / bandwidth argument. Think about ordering groups in a smart way. Ridgeline plot works well when there is a clear pattern to discover since it hides a part of the data where the overlap takes place.\n\n\nThe rdocumentation is here.\n\nBinline-20Binline-40Density\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = ENGLISH, \n           y = CLASS,\n           height = after_stat(count))) +\n  geom_ridgeline(stat = \"binline\", \n                 bins = 20,\n                 scale = 0.9,\n                 alpha = 0.8) + \n  scale_x_continuous(\n    name = \"English grades\",\n    limits = c(0, 100),\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL,\n                   expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = ENGLISH, \n           y = CLASS,\n           height = after_stat(count))) +\n  geom_ridgeline(stat = \"binline\", \n                 bins = 40,\n                 scale = 0.9,\n                 alpha = 0.8) + \n  scale_x_continuous(\n    name = \"English grades\",\n    limits = c(0, 100),\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL,\n                   expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = ENGLISH, \n           y = CLASS,\n           height = after_stat(count))) +\n  geom_ridgeline(stat = \"density\",\n                 alpha = 0.8) + \n  scale_x_continuous(\n    name = \"English grades\",\n    limits = c(0, 100),\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL,\n                   expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"gray\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, \n                   expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    # alpha = 0.8,  # This is not allowed\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Score\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, \n                   expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()",
    "crumbs": [
      "Week 04"
    ]
  },
  {
    "objectID": "hands-on/week04.html#visualizing-distribution-with-ridgeline-plot",
    "href": "hands-on/week04.html#visualizing-distribution-with-ridgeline-plot",
    "title": "Week 04 - Fundamentals of Visualization Analytics",
    "section": "",
    "text": "When to Use Ridgeline Plots:\n\nWhen you have a medium to high number of groups (more than 5), as it saves space.\nIf there is a clear pattern or ranking among groups, making insights easier to spot.\nWhen you want to efficiently visualize distributions without using separate plots.\n\nWhen Not to Use Ridgeline Plots:\n\nIf there are fewer than 5 groups, other distribution plots (e.g., boxplots) may be better.\nWhen groups lack a clear pattern, as overlapping can make the plot messy.\nIf hiding some data due to overlap reduces clarity rather than improving visualization.\n\n\n\n\n\n\n\nTip\n\n\n\nAdjust bin size/bandwidth and order groups logically for better readability.\n\n\n\n\nThe rdocumentation is here.\n\nBinline-20Binline-40Density\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = ENGLISH, \n           y = CLASS,\n           height = after_stat(count))) +\n  geom_ridgeline(stat = \"binline\", \n                 bins = 20,\n                 scale = 0.9,\n                 alpha = 0.8) + \n  scale_x_continuous(\n    name = \"English grades\",\n    limits = c(0, 100),\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL,\n                   expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = ENGLISH, \n           y = CLASS,\n           height = after_stat(count))) +\n  geom_ridgeline(stat = \"binline\", \n                 bins = 40,\n                 scale = 0.9,\n                 alpha = 0.8) + \n  scale_x_continuous(\n    name = \"English grades\",\n    limits = c(0, 100),\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL,\n                   expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = ENGLISH, \n           y = CLASS,\n           height = after_stat(count))) +\n  geom_ridgeline(stat = \"density\",\n                 alpha = 0.8) + \n  scale_x_continuous(\n    name = \"English grades\",\n    limits = c(0, 100),\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL,\n                   expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"gray\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, \n                   expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\nDefaultWith quantile lines\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    # alpha = 0.8,  # This is not allowed\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Score\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, \n                   expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = factor(stat(quantile)))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_d(name = \"Quartiles\") +  # d: discrete\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, \n                   expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTail ProbabilitySpecifying Cut Points\n\n\n\n\nShow the code\nggplot(data = exam_data,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1,\n                       option = \"magma\") +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile)))) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()",
    "crumbs": [
      "Week 04"
    ]
  },
  {
    "objectID": "hands-on/week04.html#visualizing-distribution-with-raincloud-plot",
    "href": "hands-on/week04.html#visualizing-distribution-with-raincloud-plot",
    "title": "Week 04 - Fundamentals of Visualization Analytics",
    "section": "",
    "text": "Show the code\nggplot(data = exam_data, \n       aes(x = RACE,\n           y = ENGLISH,\n           fill = RACE,\n           color = RACE)) +\n  stat_slab(adjust = 0.5,  # Bandwidth for density estimate; &lt; 1 more \"curvature\"\n            justification = -0.2,  # Without this the boxplot will overlap with the slab\n            scale = 0.5) +  # Used this to prevent overlapping with the dots from previous category\n  geom_boxplot(width = .10,\n               outlier.shape = NA,\n               alpha = 0.5) +\n    stat_dots(side = \"left\", \n            justification = 1.1, \n            # binwidth = .5, \n            dotsize = 2) +\n  coord_flip() +\n  theme_classic() +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nThe figure above shows a Raincloud Plot. A Raincloud Plot combines a half-density plot (slab) with a boxplot and dot plot, visually resembling a “raincloud.” It enhances traditional boxplots by showing density distribution and identifying multiple modalities (indicating potential subgroup patterns).\nWhen to Use\n\nBest for smaller datasets to avoid overcrowding.\nUseful for visualizing distribution patterns and density clusters.\nHighlights where data points are concentrated, unlike a standard boxplot.\n\n\n\n\n\n\n\nTip\n\n\n\nIf the dataset is large, consider removing the dot plot (“rain drops”) to avoid clutter.\n\n\n\n\n\n\n\n\nNote\n\n\n\nWe don’t need to use half_eye plot and remove the “line & eye portion”, we can just directly use the slab plot. Refer to https://cran.r-project.org/web/packages/ggdist/vignettes/slabinterval.html.",
    "crumbs": [
      "Week 04"
    ]
  },
  {
    "objectID": "hands-on/week04.html#one-sample-test-gghistostats-method",
    "href": "hands-on/week04.html#one-sample-test-gghistostats-method",
    "title": "Week 04 - Fundamentals of Visualization Analytics",
    "section": "2.1 One-sample test: gghistostats() method",
    "text": "2.1 One-sample test: gghistostats() method\n\n\nShow the code\nset.seed(1234)\n\ngghistostats(\n  data = exam_data,\n  x = ENGLISH,\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\n\n\nIn the example above, the null hypothesis (\\(H_0\\)) is set to 60. When the test type is not specified, it defaults to a parametric Student’s t-test.\nThe results indicate a statistically significant difference between the observed mean \\(\\hat{\\mu}_{\\text{mean}} = 67.18\\) and the null hypothesis, with a t-statistic of 8.77 and a p-value of \\(1.04 \\times 10^{-16}\\), strongly rejecting \\(H_0\\).\nThe effect size suggests a moderate difference Source.\nAdditionally, a Bayesian analysis with a Cauchy prior confirms strong evidence against \\(H_0(\\log_e (BF_{01}) = -31.45)\\), further supporting the conclusion that the true mean is significantly different from 60.\n\nAdditionally, if we want to do the same analysis separately for another group, for example, gender, we can use grouped_gghistostats() Reference\n\n\nShow the code\nset.seed(1234)\n\ngrouped_gghistostats(\n  data = exam_data,\n  x = ENGLISH,\n  test.value = 60,\n  xlab = \"English scores\",\n  grouping.var = GENDER,\n  type = \"robust\",\n  annotation.args = list(\n    title = \"Distribution of English scores across genders\"\n  ),\n  plotgrid.args = list(nrow = 2)\n)",
    "crumbs": [
      "Week 04"
    ]
  },
  {
    "objectID": "hands-on/week04.html#two-sample-mean-test-ggbetweenstats",
    "href": "hands-on/week04.html#two-sample-mean-test-ggbetweenstats",
    "title": "Week 04 - Fundamentals of Visualization Analytics",
    "section": "2.2 Two-sample mean test: ggbetweenstats()",
    "text": "2.2 Two-sample mean test: ggbetweenstats()\nThe example above shows individual analysis by gender. But what if we want to compare the average scores of both genders? In this case, we can use ggbetweenstats()\n\n\nShow the code\nset.seed(1234)\n\nggbetweenstats(\n  data = exam_data,\n  x = GENDER,\n  y = ENGLISH,\n  test.value = 60,\n  type = \"np\",  # Non-parametric\n  xlab = \"English scores\"\n)",
    "crumbs": [
      "Week 04"
    ]
  },
  {
    "objectID": "hands-on/week04.html#comparing-distributions-ggbetweenstats",
    "href": "hands-on/week04.html#comparing-distributions-ggbetweenstats",
    "title": "Week 04 - Fundamentals of Visualization Analytics",
    "section": "2.1.2 Comparing distributions: ggbetweenstats()",
    "text": "2.1.2 Comparing distributions: ggbetweenstats()\nThe example above shows individual analysis by gender. But what if we want to compare the average scores of both genders? In this case, we can use ggbetweenstats() to perform different analyses.\n\nMann-Whitney U testOne-way ANOVA\n\n\n\n\nShow the code\nset.seed(1234)\n\nggbetweenstats(\n  data = exam_data,\n  x = GENDER,\n  y = ENGLISH,\n  type = \"np\",  # Non-parametric\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\n\n\nThe females \\((n=170)\\) have a median score of 73.0, while males \\((n = 152)\\) have a median score of 67.0.\nThe Mann-Whitney test \\((W=15627.50,p=0.00117)\\) confirms a statistically significant difference between the two groups, while the rank biserial correlation \\(0.21, CI [0.09, 0.33]\\) suggests a moderate effect size.\n\n\n\n\n\nShow the code\nset.seed(1234)\n\nggbetweenstats(\n  data = exam_data,\n  x = RACE,  # By levels\n  y = ENGLISH,\n  test.value = 60,\n  type = \"p\",  \n  xlab = \"English scores\",\n  mean.ci = TRUE,\n  pairwise.comparisons = TRUE,\n  pairwise.display = \"s\",  # only display the significant diff \n  p.adjust.method = \"fdr\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.1.3 Significant Test of Correlation: ggscatterstats()\n\n\nShow the code\nggscatterstats(\n  data = exam_data,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n\n\n\n\n2.1.4 Significant Test of Association: ggbarstats()\n\n\nShow the code\nexam_data1 &lt;- exam_data %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nggbarstats(exam_data1, \n           x = MATHS_bins, \n           y = GENDER)",
    "crumbs": [
      "Week 04"
    ]
  },
  {
    "objectID": "hands-on/week04.html#visualizing-uncertainty-of-point-estimates-using-ggplot2",
    "href": "hands-on/week04.html#visualizing-uncertainty-of-point-estimates-using-ggplot2",
    "title": "Week 04 - Fundamentals of Visualization Analytics",
    "section": "3.1 Visualizing uncertainty of point estimates using ggplot2",
    "text": "3.1 Visualizing uncertainty of point estimates using ggplot2\n\n3.1.1 Creating summary statistics\n\n\nShow the code\nmy_sum &lt;- exam_data %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS) \n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))  # computing the standard error\n\nknitr::kable(head(my_sum), format = 'html')  # to display the summary table\n\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\n\n3.1.2 Plotting SE & CI of point estimates\n\nStandard Error BarsConfidence Intervals\n\n\n\n\nShow the code\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x = RACE,\n        ymin = mean - se,\n        ymax = mean + se),\n    width = 0.2,\n    colour = \"black\",\n    alpha = 0.9,\n    linewidth = 0.5\n  ) +\n  geom_point(aes(\n        x=RACE,\n        y=mean\n      ),\n      stat = \"identity\",\n      color = \"red\",\n      size = 1.5,\n      alpha = 1) +\n  ggtitle(\"Standard Error of Mean Maths Score by Race\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(my_sum) +\n  # The changes are here\n  geom_errorbar(\n    aes(x = reorder(RACE, -mean),\n        ymin = mean - 1.96 * se,\n        ymax = mean + 1.96 * se),\n    # And ends here\n    width = 0.2,\n    colour = \"black\",\n    alpha = 0.9,\n    linewidth = 0.5\n  ) +\n  geom_point(aes(\n        x=RACE,\n        y=mean\n      ),\n      stat = \"identity\",\n      color = \"red\",\n      size = 1.5,\n      alpha = 1) +\n  labs(x = \"Maths Score\",\n       title = \"95% Confidence Interval of Mean Maths Score by Race\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.1.3 Visualizing the uncertainty of point estimates with interactive error bars\n\n\nShow the code\nshared_df = SharedData$new(my_sum)\n\npoint_plot &lt;- ggplot(shared_df) +\n  geom_errorbar(aes(\n           x = reorder(RACE, -mean),\n           ymin = mean - 2.58 * se, \n           ymax = mean + 2.58 * se), \n           width = 0.2, \n           colour = \"black\", \n           alpha = 0.9, \n           size = 0.5) +\n         geom_point(aes(\n           x = RACE, \n           y = mean, \n           text = paste(\"Race:\", `RACE`, \n                        \"&lt;br&gt;N:\", `n`,\n                        \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                        \"&lt;br&gt;95% CI:[\", \n                        round((mean-2.58*se), digits = 2), \",\",\n                        round((mean+2.58*se), digits = 2),\"]\")),\n           stat = \"identity\", \n           color = \"red\", \n           size = 1.5, \n           alpha = 1) + \n         xlab(\"Race\") + \n         ylab(\"Average Scores\") + \n         theme_minimal() + \n         theme(axis.text.x = element_text(\n           angle = 45, vjust = 0.5, hjust=1)) +\n         ggtitle(\"99% CI of average /&lt;br&gt;maths scores by race\")\n\nsummary_tab &lt;- DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class = \"compact\", \n                     width = \"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns = c('mean', 'sd', 'se'),\n                     digits = 2)\n\nbscols(widths = c(4,8),\n       ggplotly(point_plot, tooltip = \"text\"), summary_tab)",
    "crumbs": [
      "Week 04"
    ]
  },
  {
    "objectID": "hands-on/week04.html#visualizing-uncertainty-using-ggdist",
    "href": "hands-on/week04.html#visualizing-uncertainty-using-ggdist",
    "title": "Week 04 - Fundamentals of Visualization Analytics",
    "section": "3.2 Visualizing Uncertainty using ggdist",
    "text": "3.2 Visualizing Uncertainty using ggdist\n\n3.2.1 Using stat_pointinterval()\nThe plot has been modified to show the 95 and 99% confidence intervals.\n\n\nShow the code\nexam_data %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = c(0.99, 0.95),\n                     .point = median,\n                     .interval = \"qi\") + \n  labs(\n    title = \"Visualising confidence intervals of mean math score \",\n    subtitle = \"Median Point + Multiple-interval plot (99% and 95% CIs)\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n3.2.2 Using stat_gradientinterval() to display the distribution with colour gradients\n\n\nShow the code\nexam_data %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\") + \n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n3.2.3 Bayes Modelling\nI wanted to try out the posterior predictions (for my own learning), so the graph below shows the actual data, the model’s posterior predictions, and the posterior distributions of the group means. I referenced and modified this from this article, specifically the section on posterior predictions.\n\n\nShow the code\n# Step 1: Fit the Bayesian model\nbayes_model &lt;- brm(MATHS ~ RACE, data = exam_data,\n                   family = student(),  # Robust t-distribution\n                   prior = c(prior(normal(70, 10), class = Intercept)),\n                   iter = 4000, warmup = 1000, chains = 4, cores = 4)\n\n# Step 2: Data manipulation \n# Create a grid of unique RACE values for predictions\ngrid &lt;- exam_data %&gt;%\n  data_grid(RACE)\n# Expected means (posterior predictive mean)\nmeans &lt;- grid %&gt;%\n  add_epred_draws(bayes_model)  # E(X)\n# Predicted values (posterior predictive distribution)\npreds &lt;- grid %&gt;%\n  add_predicted_draws(bayes_model) # Accounts for individual variability\n\n# Step 3: Final visualization\nexam_data %&gt;%\n  ggplot(aes(y = RACE, x = MATHS)) +\n  stat_interval(aes(x = .prediction), data = preds) +  # Prediction intervals\n  stat_pointinterval(aes(x = .epred), data = means, \n                     .width = c(.66, .95), \n                     position = position_nudge(y = -0.3)) +  # Expectation intervals\n  geom_point(alpha = 0.5) +  # Scatter plot of raw observations\n  scale_color_brewer(palette = \"Blues\") +\n  labs(\n    title = \"Bayesian Prediction and Expectation Intervals for Math Scores by Race\",\n    x = \"Math Score\",\n    y = \"Race\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nTo interpret the plot:\n\nThe prediction intervals (shaded bars from preds) show the range where individual math scores are expected to fall, accounting for both model uncertainty and natural variation.\n\nThe expectation intervals (small bars from means) represent the uncertainty around the estimated group means, giving a sense of how precise those estimates are.\n\nThe raw data points (black dots) show the actual observed values, so we can compare predictions to what really happened.",
    "crumbs": [
      "Week 04"
    ]
  },
  {
    "objectID": "hands-on/week04.html#visualizing-uncertainty-with-hypothetical-outcome-plots-hops",
    "href": "hands-on/week04.html#visualizing-uncertainty-with-hypothetical-outcome-plots-hops",
    "title": "Week 04 - Fundamentals of Visualization Analytics",
    "section": "3.3 Visualizing Uncertainty with Hypothetical Outcome Plots (HOPs)",
    "text": "3.3 Visualizing Uncertainty with Hypothetical Outcome Plots (HOPs)\n\n\nInstallation and loading package\n# devtools::install_github(\"wilkelab/ungeviz\")\n\nlibrary(ungeviz)\n\n\n\n3.3.1 Hypothetical Outcome Plots (HOPs)\nAn additional example was created following the official repo.\n\nUsing sampler()Using bootstrapper()\n\n\nFrom what I understand the algorithm samples 25 points from each group, and plots the median of the sampled data.\n\n\nShow the code\nggplot(data = exam_data, \n       (aes(x = factor(RACE), \n            y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, \n    width = 0.05), \n    size = 0.4, \n    color = \"#0072B2\", \n    alpha = 1/2) +\n  geom_hpline(data = sampler(25, \n                             group = RACE), \n              height = 0.6, \n              color = \"#D55E00\") +\n  theme_minimal() + \n  transition_states(.draw, 1, 3)  # Animation is done here, and .draw is the generated column indicating sample draw.\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nbsr &lt;- bootstrapper(20, GENDER)\n\nggplot(data = exam_data, \n       aes(x = MATHS,\n           y = ENGLISH, \n           color = GENDER)) +\n  geom_smooth(method = \"lm\", color = NA) +\n  geom_point(alpha = 0.3) +\n  # `.row` is a generated column providing a unique row number for all rows\n  geom_point(data = bsr, aes(group = .row)) +\n  geom_smooth(data = bsr, method = \"lm\", fullrange = TRUE, se = FALSE) +\n  facet_wrap(~GENDER, scales = \"free_x\") +\n  scale_color_manual(values = c(Female = \"#D55E00\", Male = \"#0072B2\"), guide = \"none\") +\n  theme_minimal() +\n  transition_states(.draw, 1, 1) + \n  enter_fade() + exit_fade()",
    "crumbs": [
      "Week 04"
    ]
  },
  {
    "objectID": "hands-on/week04.html#generating-funnel-plots-with-funnelplotr",
    "href": "hands-on/week04.html#generating-funnel-plots-with-funnelplotr",
    "title": "Week 04 - Fundamentals of Visualization Analytics",
    "section": "4.1 Generating Funnel Plots with FunnelPlotR",
    "text": "4.1 Generating Funnel Plots with FunnelPlotR\nI will only be generating a single funnel plot. How each attribute modifies the plot is already show in the tutorial link above.\n\n\nShow the code\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,  # Event of interest\n  denominator = Positive,\n  group = \"Sub-district\",  # Level of points plotted \n  data_type = \"PR\",  # Proportions Ratio - Event rates (In this case Death Rates)\n  xrange = c(0, 6500), \n  yrange = c(0, 0.05),\n  # label = NA,  # this is to remove the outlier labels\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\",          \n  x_label = \"Cumulative COVID-19 Positive Cases\",\n  y_label = \"Cumulative Fatality Rate\"\n)\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion.",
    "crumbs": [
      "Week 04"
    ]
  },
  {
    "objectID": "hands-on/week04.html#generating-funnel-plot-with-funnelplotr",
    "href": "hands-on/week04.html#generating-funnel-plot-with-funnelplotr",
    "title": "Week 04 - Fundamentals of Visualization Analytics",
    "section": "4.1 Generating Funnel Plot with FunnelPlotR",
    "text": "4.1 Generating Funnel Plot with FunnelPlotR\nI will only be generating a single funnel plot. How each attribute modifies the plot is already show in the tutorial link above.\n\n\nShow the code\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,  # Event of interest\n  denominator = Positive,\n  group = \"Sub-district\",  # Level of points plotted \n  data_type = \"PR\",  # Proportions Ratio - Event rates (In this case Death Rates)\n  xrange = c(0, 6500), \n  yrange = c(0, 0.05),\n  # label = NA,  # this is to remove the outlier labels\n  title = str_wrap(\"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", width = 100),          \n  x_label = \"Cumulative COVID-19 Positive Cases\",\n  y_label = \"Cumulative Fatality Rate\"\n)\n\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion.",
    "crumbs": [
      "Week 04"
    ]
  },
  {
    "objectID": "hands-on/week04.html#funnel-plot-with-ggplot2",
    "href": "hands-on/week04.html#funnel-plot-with-ggplot2",
    "title": "Week 04 - Fundamentals of Visualization Analytics",
    "section": "4.2 Funnel Plot with ggplot2",
    "text": "4.2 Funnel Plot with ggplot2\n\n4.2.1 Computing the statistics\n\n\nShow the code\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nw_mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\nnum_seq &lt;- seq(1, max(df$Positive), 1)\nnum_ll95 &lt;- w_mean - 1.96 * sqrt((w_mean*(1-w_mean)) / (num_seq)) \nnum_ul95 &lt;- w_mean + 1.96 * sqrt((w_mean*(1-w_mean)) / (num_seq)) \nnum_ll999 &lt;- w_mean - 3.29 * sqrt((w_mean*(1-w_mean)) / (num_seq)) \nnum_ul999 &lt;- w_mean + 3.29 * sqrt((w_mean*(1-w_mean)) / (num_seq)) \n\ndfCI &lt;- data.frame(num_ll95, num_ul95, num_ll999, \n                   num_ul999, num_seq, w_mean)\n\nknitr::kable(head(dfCI), format = 'html')\n\n\n\n\n\nnum_ll95\nnum_ul95\nnum_ll999\nnum_ul999\nnum_seq\nw_mean\n\n\n\n\n-0.2230353\n0.2529745\n-0.3845386\n0.4144778\n1\n0.0149696\n\n\n-0.1533253\n0.1832645\n-0.2675254\n0.2974645\n2\n0.0149696\n\n\n-0.1224426\n0.1523818\n-0.2156866\n0.2456257\n3\n0.0149696\n\n\n-0.1040328\n0.1339720\n-0.1847845\n0.2147237\n4\n0.0149696\n\n\n-0.0914694\n0.1214086\n-0.1636959\n0.1936351\n5\n0.0149696\n\n\n-0.0821955\n0.1121347\n-0.1481289\n0.1780681\n6\n0.0149696\n\n\n\n\n\n\n\n\n\n4.2.2 Plotting a static funnel plot\n\n\nShow the code\nlinetypes &lt;- c(\"dashed\", \"dashed\", \"solid\", \"solid\")\nys &lt;- c(\"num_ll95\", \"num_ul95\", \"num_ll999\", \"num_ul999\")\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n      geom_point(aes(label = `Sub-district`), alpha = 0.4)\n      \n# Loop over the linetypes and ys to add corresponding lines\nfor (i in seq_along(linetypes)) {\n  p &lt;- p + geom_line(data = dfCI, aes(x = num_seq, y = !!sym(ys[i])), linetype = linetypes[i], size = 0.4, colour = \"grey40\")\n}\n\np &lt;- p + geom_hline(data = dfCI, aes(yintercept = w_mean), size = 0.4, colour = \"grey40\") +\n      coord_cartesian(ylim = c(0, 0.05)) +\n      annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") +\n      annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") +\n      ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n      xlab(\"Cumulative Number of COVID-19 Cases\") + \n      ylab(\"Cumulative Fatality Rate\") +\n      theme_light() +\n      theme(\n        plot.title = element_text(size = 12),\n        legend.position = c(0.91, 0.85), \n        legend.title = element_text(size = 7),\n        legend.text = element_text(size = 7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\")\n      )\np\n\n\n\n\n\n\n\n\n\n\n\n4.2.3 Converting to an interactive funnel plot\n\n\nShow the code\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly",
    "crumbs": [
      "Week 04"
    ]
  },
  {
    "objectID": "hands-on/week04.html#visual-statistical-analysis---from-the-data",
    "href": "hands-on/week04.html#visual-statistical-analysis---from-the-data",
    "title": "Week 04 - Fundamentals of Visualization Analytics",
    "section": "2.1 Visual Statistical Analysis - From the Data",
    "text": "2.1 Visual Statistical Analysis - From the Data\n\n2.1.1 One-sample test: gghistostats() method\n\n\nShow the code\nset.seed(1234)\n\ngghistostats(\n  data = exam_data,\n  x = ENGLISH,\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\n\n\nIn the example above, the null hypothesis (\\(H_0\\)) is set to 60. When the test type is not specified, it defaults to a parametric Student’s t-test.\nThe results indicate a statistically significant difference between the observed mean \\(\\hat{\\mu}_{\\text{mean}} = 67.18\\) and the null hypothesis, with a t-statistic of 8.77 and a p-value of \\(1.04 \\times 10^{-16}\\), strongly rejecting \\(H_0\\).\nThe effect size suggests a moderate difference Source.\nAdditionally, a Bayesian analysis with a Cauchy prior confirms strong evidence against \\(H_0(\\log_e (BF_{01}) = -31.45)\\), further supporting the conclusion that the true mean is significantly different from 60.\n\nAdditionally, if we want to do the same analysis separately for another group, for example, gender, we can use grouped_gghistostats() Reference\n\n\nShow the code\nset.seed(1234)\n\ngrouped_gghistostats(\n  data = exam_data,\n  x = ENGLISH,\n  test.value = 60,\n  xlab = \"English scores\",\n  grouping.var = GENDER,\n  type = \"robust\",\n  annotation.args = list(\n    title = \"Distribution of English scores across genders\"\n  ),\n  plotgrid.args = list(nrow = 2)\n)",
    "crumbs": [
      "Week 04"
    ]
  },
  {
    "objectID": "hands-on/week04.html#visual-statistical-analysis---model-diagnostic",
    "href": "hands-on/week04.html#visual-statistical-analysis---model-diagnostic",
    "title": "Week 04 - Fundamentals of Visualization Analytics",
    "section": "2.2 Visual Statistical Analysis - Model Diagnostic",
    "text": "2.2 Visual Statistical Analysis - Model Diagnostic\n\n\nLoading packages & data import\npacman::p_load(readxl, performance, parameters, see)\n\ncar_resale &lt;- read_xls(\"../data/ToyotaCorolla.xls\", \n                       \"data\")\n\nknitr::kable(head(car_resale), format = 'html')\n\n\n\n\n\nId\nModel\nPrice\nAge_08_04\nMfg_Month\nMfg_Year\nKM\nQuarterly_Tax\nWeight\nGuarantee_Period\nHP_Bin\nCC_bin\nDoors\nGears\nCylinders\nFuel_Type\nColor\nMet_Color\nAutomatic\nMfr_Guarantee\nBOVAG_Guarantee\nABS\nAirbag_1\nAirbag_2\nAirco\nAutomatic_airco\nBoardcomputer\nCD_Player\nCentral_Lock\nPowered_Windows\nPower_Steering\nRadio\nMistlamps\nSport_Model\nBackseat_Divider\nMetallic_Rim\nRadio_cassette\nTow_Bar\n\n\n\n\n81\nTOYOTA Corolla 1.6 5drs 1 4/5-Doors\n18950\n25\n8\n2002\n20019\n100\n1180\n3\n100-120\n1600\n5\n5\n4\nPetrol\nBlue\n1\n1\n0\n0\n1\n1\n1\n1\n1\n0\n1\n1\n1\n1\n0\n0\n0\n0\n0\n0\n0\n\n\n1\nTOYOTA Corolla 2.0 D4D HATCHB TERRA 2/3-Doors\n13500\n23\n10\n2002\n46986\n210\n1165\n3\n&lt; 100\n&gt;1600\n3\n5\n4\nDiesel\nBlue\n1\n0\n0\n1\n1\n1\n1\n0\n0\n1\n0\n1\n1\n1\n0\n0\n0\n1\n0\n0\n0\n\n\n2\nTOYOTA Corolla 2.0 D4D HATCHB TERRA 2/3-Doors\n13750\n23\n10\n2002\n72937\n210\n1165\n3\n&lt; 100\n&gt;1600\n3\n5\n4\nDiesel\nSilver\n1\n0\n0\n1\n1\n1\n1\n1\n0\n1\n1\n1\n0\n1\n0\n0\n0\n1\n0\n0\n0\n\n\n3\n TOYOTA Corolla 2.0 D4D HATCHB TERRA 2/3-Doors\n13950\n24\n9\n2002\n41711\n210\n1165\n3\n&lt; 100\n&gt;1600\n3\n5\n4\nDiesel\nBlue\n1\n0\n1\n1\n1\n1\n1\n0\n0\n1\n0\n0\n0\n1\n0\n0\n0\n1\n0\n0\n0\n\n\n4\nTOYOTA Corolla 2.0 D4D HATCHB TERRA 2/3-Doors\n14950\n26\n7\n2002\n48000\n210\n1165\n3\n&lt; 100\n&gt;1600\n3\n5\n4\nDiesel\nBlack\n0\n0\n1\n1\n1\n1\n1\n0\n0\n1\n0\n0\n0\n1\n0\n0\n0\n1\n0\n0\n0\n\n\n5\nTOYOTA Corolla 2.0 D4D HATCHB SOL 2/3-Doors\n13750\n30\n3\n2002\n38500\n210\n1170\n3\n&lt; 100\n&gt;1600\n3\n5\n4\nDiesel\nBlack\n0\n0\n1\n1\n1\n1\n1\n1\n0\n1\n0\n1\n1\n1\n0\n1\n0\n1\n0\n0\n0\n\n\n\n\n\n\n\n\n2.2.1 Multiple Regression Model using lm()\n\n\nShow the code\n# Mfg_Year was excluded due to high collinearity with Age_08_04\nmodel &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04                KM            Weight  \n      -2.186e+03        -1.195e+02        -2.406e-02         1.972e+01  \nGuarantee_Period  \n       2.682e+01  \n\n\n\n\n2.2.2 Performing model diagnostics\n\n\nShow the code\n# Suite of model diagnostics\ncheck_model(model)\n\n\n\n\n\n\n\n\n\n\n\n2.2.3 Visualizing model parameters\n\nUsing plot()Using ggcoefstats()\n\n\n\n\nShow the code\nplot(parameters(model))\n\n\n\n\n\n\n\n\n\n\n\nThe scale here looks different because of the intercept term.\n\n\nShow the code\nggcoefstats(model, \n            output = \"plot\"\n            # exclude.intercept = TRUE\n            )",
    "crumbs": [
      "Week 04"
    ]
  }
]