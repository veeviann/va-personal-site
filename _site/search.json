[
  {
    "objectID": "hands-on/week02.html",
    "href": "hands-on/week02.html",
    "title": "Week 02 - Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "The following content is created by following the tutorial on this chapter.\n\npacman::p_load(ggrepel, patchwork, ggthemes, hrbrthemes, tidyverse)\n\nexam_data &lt;- read_csv(\"../data/Exam_data.csv\")",
    "crumbs": [
      "Week 02"
    ]
  },
  {
    "objectID": "hands-on/week02.html#introduction",
    "href": "hands-on/week02.html#introduction",
    "title": "Week 02 - Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "The following content is created by following the tutorial on this chapter.\n\npacman::p_load(ggrepel, patchwork, ggthemes, hrbrthemes, tidyverse)\n\nexam_data &lt;- read_csv(\"../data/Exam_data.csv\")",
    "crumbs": [
      "Week 02"
    ]
  },
  {
    "objectID": "hands-on/week02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "hands-on/week02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Week 02 - Beyond ggplot2 Fundamentals",
    "section": "2.2 Beyond ggplot2 Annotation: ggrepel",
    "text": "2.2 Beyond ggplot2 Annotation: ggrepel\nThe ggrepel package extends ggplot2 by providing geoms (geom_text_repel() and geom_label_repel()) that prevent overlapping text labels. These labels automatically adjust their positions to avoid overlapping with one another, data points, and the edges of the plotting area. The purpose of this is to improve readability by avoiding overlapping labels compared to geom_label() or geom_text().\nIn the example below, we will replace geom_label() with geom_label_repel().\n\nDefaultWith ggrepelWith ggrepel (overlaps allowed)\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              linewidth = 0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              linewidth = 0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, \n              linewidth = 0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\",\n                   max.overlaps = nrow(exam_data)*0.2) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\nThis example highlights a limitation: when too many labels overlap, the plot becomes cluttered and less informative. In the third tab, even annotating just 20% of the points results in an overcrowded graph. If identifying specific points is important, consider annotating only those points or subsetting the dataset to focus on key data. Alternatively, using hover text can be a more effective way to display identities without overwhelming the plot.",
    "crumbs": [
      "Week 02"
    ]
  },
  {
    "objectID": "hands-on/week02.html#beyond-ggplot2-themes",
    "href": "hands-on/week02.html#beyond-ggplot2-themes",
    "title": "Week 02 - Beyond ggplot2 Fundamentals",
    "section": "2.3 Beyond ggplot2 themes",
    "text": "2.3 Beyond ggplot2 themes\nThe examples below showcases the eight built-in themes in ggplot2.\n\ntheme_gray()theme_bw()theme_classic()theme_dark()theme_light()theme_linedraw()theme_minimal()theme_void()\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100) +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100) +\n  theme_bw() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100) +\n  theme_classic() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100) +\n  theme_dark() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100) +\n  theme_light() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100) +\n  theme_linedraw() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100) +\n  theme_minimal() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100) +\n  theme_void() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe geom itself does not change with respect to the theme. Therefore, attributes like color and fill within the geom must be explicitly defined and are not automatically adjusted by the theme.\n\n\n\n2.3.1 ggtheme package\n\ntheme_economist()theme_wsj()theme_solarized()\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  theme_economist() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  theme_wsj() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  theme_solarized() +\n  ggtitle(\"Distribution of Maths scores\") \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.3.2 hrbrthemes package\nThe link from the page did not work so I refered to this page instead.\n\n\nShow the code\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  scale_color_ipsum() +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\") +\n  ggtitle(\"Distribution of Maths scores\")",
    "crumbs": [
      "Week 02"
    ]
  },
  {
    "objectID": "hands-on/week02.html#composing-graphs-using-patchwork",
    "href": "hands-on/week02.html#composing-graphs-using-patchwork",
    "title": "Week 02 - Beyond ggplot2 Fundamentals",
    "section": "2.4 Composing Graphs using patchwork",
    "text": "2.4 Composing Graphs using patchwork\nSometimes we need more than one graph to create a visually compelling narrative. In this section, we will be exploring different ggplot2 extensions to provide functions to compose figure with multiple graphs. The three graphs are as shown below.\n\nMath HistogramEnglish HistogramMath vs English Scatterplot\n\n\n\n\nShow the code\np1 &lt;- ggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\") \n\np1\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\np2 &lt;- ggplot(data = exam_data, \n       aes(x = ENGLISH)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  coord_cartesian(xlim = c(0,100)) +\n  ggtitle(\"Distribution of English scores\") \n\np2\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\np3 &lt;- ggplot(data = exam_data, \n             aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              size = 0.5) + \n  coord_cartesian(xlim = c(0, 100),\n                  ylim = c(0, 100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\np3\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.4.1 patchwork operators\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n“|” operator to place the plots beside each other\n\n\nTwo-plotsThree-plots\n\n\n\n\nShow the code\np1 + p2\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\n(p1 / p2) | p3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.4.2 patchwork operators & extra functionalities\n\nWith tagsLayeringThemed\n\n\nAuto-tagging capabilities can be done by using plot_annotation() (eg. numbering the figures automatically).\n\n\nShow the code\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist() +\n  theme(plot.title = element_text(size = 12, face = \"bold\")) # Needs this or the font is too large for the plot",
    "crumbs": [
      "Week 02"
    ]
  },
  {
    "objectID": "hands-on/week02.html#extras",
    "href": "hands-on/week02.html#extras",
    "title": "Week 02 - Beyond ggplot2 Fundamentals",
    "section": "2.5 EXTRAS",
    "text": "2.5 EXTRAS\nTODO",
    "crumbs": [
      "Week 02"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Learning journey and deliverables of ISSS608"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Analytics Journey",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics And Applications."
  },
  {
    "objectID": "hands-on/week01.html",
    "href": "hands-on/week01.html",
    "title": "Week 01 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "The following content is created by following the tutorial on this chapter.\n\npacman::p_load(tidyverse)\n\nexam_data &lt;- read_csv(\"../data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS, xlab=\"Math Score\", main=\"Distribution of Math Scores\")\n\n\n\n\n\n\n\n\n\n\n\n# ggplot(data=df) will just display an empty canvas.\n# setting aes(x=MATHS) just sets the x-axis to the range of values in the MATHS column\n# using geom_histogram \nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10,\n                 boundary=100,\n                 color=\"black\",\n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Math Scores\")",
    "crumbs": [
      "Week 01"
    ]
  },
  {
    "objectID": "hands-on/week01.html#introduction",
    "href": "hands-on/week01.html#introduction",
    "title": "Week 01 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "The following content is created by following the tutorial on this chapter.\n\npacman::p_load(tidyverse)\n\nexam_data &lt;- read_csv(\"../data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS, xlab=\"Math Score\", main=\"Distribution of Math Scores\")\n\n\n\n\n\n\n\n\n\n\n\n# ggplot(data=df) will just display an empty canvas.\n# setting aes(x=MATHS) just sets the x-axis to the range of values in the MATHS column\n# using geom_histogram \nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10,\n                 boundary=100,\n                 color=\"black\",\n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Math Scores\")",
    "crumbs": [
      "Week 01"
    ]
  },
  {
    "objectID": "hands-on/week01.html#geometric-objects-in-ggplot2-geom",
    "href": "hands-on/week01.html#geometric-objects-in-ggplot2-geom",
    "title": "Week 01 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.2 Geometric Objects in ggplot2: geom",
    "text": "1.2 Geometric Objects in ggplot2: geom\n\n1.2.1 Bar chart with geom_bar()\n\nggplot(data=exam_data,\n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n1.2.2 Dot plot with geom_dotplot()\nNot be confused with scatterplots, a dot plot is essentially a histogram but in the style of stacked dots.\n\nggplot(data=exam_data, \n       aes(x=MATHS)) +\n  geom_dotplot(dotsize=0.5)\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\n\n\n\n\nBecause the y-axis scale is misleading, we will have to turn off y-axis with the scale_y_continuous()\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_dotplot(binwidth=2.5,\n               dotsize=0.5) +\n  scale_y_continuous(NULL, breaks=NULL)\n\n\n\n\n\n\n\n\nQuestion: When is a dot plot preferred over something like a histogram? Is counting the dots even feasible?\n\n\n1.2.3 Histograms with geom_histogram()\n\n# default number of bins is 30\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nIn the geom(), we can use the arguments to modify the geometric object.\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\")\n\n\n\n\n\n\n\n\nSimilar to hue in seaborn, we can colour the histogram by sub-groups using the fill argument in aesthetic(). We can also play around with the other arguments like alpha and color.\n\nfillalphacolor\n\n\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           fill=GENDER)) +\n  geom_histogram(bins=20,\n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\n\n# Can't use it on continuous variables either even though there's the warning.\n# It's very difficult to see.\nggplot(data=exam_data,\n       aes(x=MATHS,\n           alpha=CLASS)) +\n  geom_histogram(bins=20,\n                 color=\"grey30\")\n\nWarning: Using alpha for a discrete variable is not advised.\n\n\n\n\n\n\n\n\n\n\n\nThe color argument in the geom_histogram() needs to be removed as it will override the previous aes()\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           color=GENDER)) +\n  geom_histogram(bins=20,\n                 alpha=0.3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.2.4 Kernel Density Estimate with geom_density()\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_density()\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           color=GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\n1.2.5 Boxplot with geom_boxplot()\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n# notches are used to see if medians of the distributions differ\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_boxplot(notches=TRUE) # TRUE must be all caps\n\nWarning in geom_boxplot(notches = TRUE): Ignoring unknown parameters: `notches`\n\n\n\n\n\n\n\n\n\n\n\n1.2.6 Violin plot with geom_violin()\nThis is for comparing multiple data distributions side by side. With density curves, as the lines may overlap with one another, it is more challenging to compare the different distributions.\n\nggplot(data=exam_data, \n       aes(y=MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\n1.2.7 Scatterplot with geom_point()\n\nggplot(data=exam_data,\n       aes(x=MATHS,\n           y=ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n1.2.8 Combining geom objects\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_boxplot() +\n  geom_point(position=\"jitter\",\n             size=0.5)",
    "crumbs": [
      "Week 01"
    ]
  },
  {
    "objectID": "hands-on/week01.html#statistics-functions-in-ggplot2-stat",
    "href": "hands-on/week01.html#statistics-functions-in-ggplot2-stat",
    "title": "Week 01 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.3 Statistics functions in ggplot2: stat",
    "text": "1.3 Statistics functions in ggplot2: stat\n\n1.3.1 Using the stat_summary() method\nThe box plot above doesn’t indicate the position of the means. By working with the stat_summary() function, we can indicate the mean values on the plot.\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom=\"point\",\n                fun=\"mean\",\n                colour=\"red\",\n                size=4)\n\n\n\n\n\n\n\n\n\n\n1.3.2 Using geom() to update stat\nOverriding the default stat, we can add the mean values as well.\n\nggplot(data=exam_data,\n       aes(y=MATHS,\n           x=GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",\n             fun=\"mean\",\n             colour=\"red\",\n             size=4)\n\n\n\n\n\n\n\n\n\n\n1.3.3 Using geom_smooth() to add best fit curve\n\nloesslm\n\n\n\nggplot(data=exam_data, \n       aes(x=MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(linewidth=0.5)\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm,\n              linewidth=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'",
    "crumbs": [
      "Week 01"
    ]
  },
  {
    "objectID": "hands-on/week01.html#facets",
    "href": "hands-on/week01.html#facets",
    "title": "Week 01 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.4 Facets",
    "text": "1.4 Facets\nAlso known as trellis plot. In mpl it’s subplots.\n\n1.4.1 Wrapping 1d sequence of panels into 2d with facet_wrap()\n\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n1.4.2 Creating matrix of panels with facet_grid()\n\n# This should be similar to subplots\nggplot(data=exam_data,\n       aes(x=MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)",
    "crumbs": [
      "Week 01"
    ]
  },
  {
    "objectID": "hands-on/week01.html#coordinates",
    "href": "hands-on/week01.html#coordinates",
    "title": "Week 01 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.5 Coordinates",
    "text": "1.5 Coordinates\n\n1.5.1 Flipping the coordinates with coord_flip()\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n1.5.2 Changing the y- and x-axis range with coord_cartesian()\n\nggplot(data=exam_data, \n       aes(x=MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'",
    "crumbs": [
      "Week 01"
    ]
  },
  {
    "objectID": "hands-on/week01.html#themes",
    "href": "hands-on/week01.html#themes",
    "title": "Week 01 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.6 Themes",
    "text": "1.6 Themes\n\nList of built-in themes\n\n\n1.6.1 Examples of different themes\n\ntheme_gray()theme_classic()theme_minimal()\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()",
    "crumbs": [
      "Week 01"
    ]
  },
  {
    "objectID": "hands-on/week01.html#extras",
    "href": "hands-on/week01.html#extras",
    "title": "Week 01 - A Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7 EXTRAS",
    "text": "1.7 EXTRAS\nTODO",
    "crumbs": [
      "Week 01"
    ]
  }
]