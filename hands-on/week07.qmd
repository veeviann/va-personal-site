---
title: "Week 07 - Visualising and Analysing Time-oriented Data"
format: html
author: Vivian Chew
sidebar: false
date: 02/27/2025 #mm/dd/yyyy
date-format: long
date-modified: last-modified
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---

# 1 Introduction & Data Preparation

```{r}
#| code-fold: true
#| code-summary: "Loading packages"

pacman::p_load(scales,
               viridis,
               lubridate,
               ggthemes,
               gridExtra,
               readxl,
               knitr,
               data.table,
               tidyverse,
               CGPfunctions,  #for slopegraph
               ggHoriPlot
               )
```

## 1.1 Data Preparation

## 1.1.1 Attack dataset

```{r}
#| code-fold: true
#| code-summary: "Load attack data"

attacks <- read_csv("../data/wk07/eventlog.csv")
kable(head(attacks))
```

We can see that there are three columns, the timestamp, source_country and timezone.

```{r}
#| code-fold: true
#| code-summary: "Creating weekday and hour fields"

make_hr_weekday <- function(ts, sc, tz) {
  real_times <- ymd_hms(ts,
                        tz = tz[1], 
                        quiet = TRUE) # Transforms dates stored as character vectors in year, month, day, hour, minute, second format to POSIXct objects
  dt <- data.table(source_country = sc,
                   wkday = weekdays(real_times),
                   hour = hour(real_times))
  return(dt)
}

wkday_levels <- c('Saturday', 'Friday', 'Thursday', 'Wednesday', 'Tuesday', 'Monday', 'Sunday')
```

```{r}
#| code-fold: true
#| code-summary: "Modifying the attack tibble"

attacks_new <- attacks %>%
  group_by(tz) %>%
  do(make_hr_weekday(.$timestamp,
                   .$source_country,
                   .$tz)) %>%
  ungroup() %>%
  mutate(wkday = factor(wkday, levels = wkday_levels),  # To keep the order
         hour = factor(hour, levels = 0:23)
)

kable(head(attacks_new))
```

### 1.1.2 Air arrivals dataset

```{r}
#| code-fold: true
#| code-summary: "Loading the air dataset"

air <- read_excel("../data/wk07/arrivals_by_air.xlsx")
kable(head(air))
```

```{r}
#| code-fold: true
#| code-summary: "Creating MM YY columns"

air$month <- factor(month(air$`Month-Year`),
                    levels=1:12,
                    labels=month.abb,
                    ordered=TRUE)
air$year <- year(ymd(air$`Month-Year`))
kable(head(air))
```

### 1.1.3 Rice dataset

```{r}
#| code-fold: true
#| code-summary: "Loading the rice dataset"

rice <- read_csv("../data/wk07/rice.csv")
kable(head(rice))
```

### 1.1.4 Retail price dataset

```{r}
#| code-fold: true
#| code-summary: "Loading the retail price dataset"

averp <- read_csv("../data/wk07/AVERP.csv") %>%
  mutate(`Date` = dmy(`Date`))
kable(head(averp))
```

# 2 Visualizations

## 2.1 Calendar Heatmap

### 2.1.1 Single Calendar Heatmap

::: panel-tabset
## Without `theme_tufte()`

```{r}
#| code-fold: true
#| code-summary: "Building the calendar heatmap"

grouped <- attacks_new %>%
  count(wkday, hour) %>%
  ungroup() %>%
  na.omit()

ggplot(data = grouped,
       aes(x = hour,
           y = wkday,
           fill = n)) + 
  geom_tile(color = "white",
            size = 0.1) +
  coord_equal() +
  scale_fill_gradient(name = "# of attacks",
                      low = "sky blue",
                      high = "dark blue") +
  labs(x = NULL,
       y = NULL,
       title = "Attacks by weekday and time of day") +
  theme(axis.ticks = element_blank(),
        plot.title = element_text(hjust = 0.5),
        legend.title = element_text(size = 8),
        legend.text = element_text(size = 6))
```

## With `theme_tufte()`

Look closely to see that the background of the plot is gone.

```{r}
#| code-fold: true
#| code-summary: "Building the calendar heatmap"

grouped <- attacks_new %>%
  count(wkday, hour) %>%
  ungroup() %>%
  na.omit()

ggplot(data = grouped,
       aes(x = hour,
           y = wkday,
           fill = n)) + 
  geom_tile(color = "white",
            size = 0.1) +
  theme_tufte(base_family = "Helvetica") +
  coord_equal() +
  scale_fill_gradient(name = "# of attacks",
                      low = "sky blue",
                      high = "dark blue") +
  labs(x = NULL,
       y = NULL,
       title = "Attacks by weekday and time of day") +
  theme(axis.ticks = element_blank(),
        plot.title = element_text(hjust = 0.5),
        legend.title = element_text(size = 8),
        legend.text = element_text(size = 6))
```
:::

### 2.1.2 Multiple Calendar Heatmaps

```{r}
#| code-fold: true
#| code-summary: "Data Preparation"

attacks_by_country <- attacks_new %>%
  count(source_country) %>%
  mutate(percent = percent(n/sum(n))) %>%
  arrange(desc(n))

top4 <- attacks_by_country$source_country[1:4]
top4_attacks <- attacks_new %>%
  filter(source_country %in% top4) %>%
  count(source_country, wkday, hour) %>%
  ungroup() %>%
  mutate(source_country = factor(source_country, levels = top4)) %>%
  na.omit()

kable(head(top4_attacks))
```

```{r}
#| code-fold: true
#| code-summary: "Plotting multiple calendar heatmaps"
#| fig-height: 8
#| fig-width: 12

ggplot(data = top4_attacks,
       aes(x = hour,
           y = wkday,
           fill = n)) + 
  geom_tile(color = "white",
            size = 0.1) +
  facet_wrap(~source_country, ncol = 2) +
  theme_tufte(base_family = "Helvetica") +
  coord_equal() +
  scale_fill_gradient(name = "# of attacks",
                      low = "sky blue",
                      high = "dark blue") +
  labs(x = NULL,
       y = NULL,
       title = "Attacks on top 4 countries by weekday and time of day") +
  theme(axis.ticks = element_blank(),
        plot.title = element_text(hjust = 0.5),
        legend.title = element_text(size = 8),
        legend.text = element_text(size = 6))
```

## 2.2 Cycle Plot

```{r}
#| code-fold: true
#| code-summary: "Plotting the cycle plot"
#| fig-height: 7
#| fig-width: 12

subset_air <- air %>%
  select(`Vietnam`,
         month, 
         year) %>%
  filter(year >= 2010)

hline.data <- subset_air %>%
  group_by(month) %>%
  summarise(avgvalue = mean(`Vietnam`))

ggplot() +
  geom_line(data = subset_air,
            aes(x = year,
                y = `Vietnam`,
                group = month),
            colour = "black") +
  geom_hline(aes(yintercept = avgvalue),
             data = hline.data,
             linetype = 6,
             colour = "red",
             size = 0.5) +
  facet_grid(~month) +
  labs(axis.text.x = element_blank(),
       title = "Vistor arrivals from Vietnam by air, Jan 2010 - Dec 2019",
       x = "",
       y = "No. of Visitors") +
  theme_tufte(base_family = "Helvetica")
```

## 2.3 Slopegraph

```{r}
#| code-fold: true
#| code-summary: "Plotting the slopegraph"

rice %>% 
  mutate(Year = factor(Year)) %>%
  filter(Year %in% c(1961, 1980)) %>%
  newggslopegraph(Year, Yield, Country,
                  Title = "Rice Yield of Top 11 Asian Countries",
                  SubTitle = "1961 - 1980",
                  Caption = "Modified")
```

## 2.4 Horizon Graph

::: panel-tabset
## Linegraph

```{r}
#| code-fold: true
#| code-summary: "Linegraph"

averp %>%
  filter(Date >= "2018-01-01") %>%
  ggplot() +
  geom_line(aes(x = Date,
                y = Values,
                colour = `Consumer Items`)) +
  labs(title = "Average Retail Prices of Selected Consumer Items (Jan 2018 to Dec 20222)",
       x = "Average Price",
       y = "") +
  theme_gray() +
  theme(legend.position = "none")
```

## Horizongraph

```{r}
#| code-fold: true
#| code-summary: "Horizongraph"

averp %>%
  filter(Date >= "2018-01-01") %>%
  ggplot() + 
  geom_horizon(aes(x = Date, y=Values), 
               origin = "midpoint", 
               horizonscale = 6)+
  facet_grid(`Consumer Items`~.) +
  theme_few() +
  scale_fill_hcl(palette = 'RdBu') +
  theme(panel.spacing.y=unit(0, "lines"), strip.text.y = element_text(
    size = 5, angle = 0, hjust = 0),
    legend.position = 'none',
    axis.text.y = element_blank(),
    axis.text.x = element_text(size=7),
    axis.title.y = element_blank(),
    axis.title.x = element_blank(),
    axis.ticks.y = element_blank(),
    panel.border = element_blank()
    ) +
  scale_x_date(expand=c(0,0), date_breaks = "3 month", date_labels = "%b%y") +
  ggtitle("Average Retail Prices of Selected Consumer Items (Jan 2018 to Dec 20222)")
```
:::
