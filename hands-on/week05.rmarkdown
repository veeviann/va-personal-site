---
title: "Week 05 - Visual Multivariate Analysis"
format: html
author: Vivian Chew
sidebar: false
date: 02/13/2025 #mm/dd/yyyy
date-format: long
date-modified: last-modified
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---




# 1 Heatmaps

The following section was modified according to [https://r4va.netlify.app/chap14](this%20chapter).

## 1.1 Data Preparation



```{r}
#| code-fold: true
#| code-summary: "Loading packages & data import"

pacman::p_load(seriation, dendextend, heatmaply, tidyverse, 
               pheatmap, gplots, RColorBrewer)

wh <- read_csv("../data/WHData-2018.csv")
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"

row.names(wh) <- wh$Country
wh1 <- dplyr::select(wh, c(3, 7:12))
row.names(wh1) <- wh$Country
wh_matrix <- data.matrix(wh1)
head(wh_matrix)
```




## 1.2 Static Heatmaps

The examples below show different ways of creating a static heatmap. The key things to note:

- Scaling the data column-wise to ensure that the colour scales are the same.
- Dendrogram - whether to show, and if we want to differentiate the groups based on different levels of the cluster.
- Legend (colour map key)

::: panel-tabset
## `heatmap()`



```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-height: 10

coul <- colorRampPalette(brewer.pal(8, "PiYG"))(40)
heatmap(wh_matrix,
        Rowv = NULL,  # NA to suppress the dendrogram
        Colv = NULL,
        symm = FALSE,  # Matrix is not symmetric
        scale = "column",  # Standardize by columns
        cexCol = 0.8,  # Reduce column label font size
        col = coul
        )
```




## `heatmap.2()`
It's so difficult to modify the position & the size of the key ðŸ˜­



```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-height: 10

# Ref: https://stackoverflow.com/questions/55585166/difficulty-positioning-heatmap-2-components

coul <- colorRampPalette(brewer.pal(8, "PiYG"))(40)
heatmap.2(wh_matrix,
        Rowv = TRUE,  # NA to suppress the dendrogram
        Colv = TRUE,
        symm = FALSE,  # Matrix is not symmetric
        density.info="none",  # turns off density plot inside color legend
        scale = "column",  # Standardize by columns
        key = TRUE,  # Include color key
        trace = "none",  # The trace lines are the blue lines
        cexCol = 0.8,  # Reduce column label font size
        col = coul,
        keysize=1, 
        lmat = rbind( c(0, 3, 0), c(2, 1, 0), c(0, 4, 0)), # Col-dendro, row-dendro, key
        lhei = c(0.43, 2.6, 0.6), # Height 
        lwid = c(0.6, 4, 0.6), # Alter dimensions of display array cell widths
        )
```




## `pheatmap()`
The order here is different because it is grouped by the cluster. 



```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-height: 10

coul <- colorRampPalette(brewer.pal(8, "PiYG"))(40)
pheatmap(wh_matrix,
         scale = "column",
         color = coul,
         cutree_rows = 4,
         fontsize = 6)
```




## `ggheatmap()`




```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-height: 10

coul <- colorRampPalette(brewer.pal(8, "PiYG"))(40)
ggheatmap(wh_matrix,
         scale = "column",
         color = coul)
```




:::

## 1.3 Interactive Heatmap

### 1.3.1 Data transformation methods
::: panel-tabset
## column scaling



```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-height: 10

coul <- colorRampPalette(brewer.pal(8, "PiYG"))(40)
heatmaply(wh_matrix,
          colors = coul,
          scale="column",
          dist_method = "euclidean",
          hclust_method = "ward.D")
```




## normalizing (min max)



```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-height: 10

coul <- colorRampPalette(brewer.pal(8, "PiYG"))(40)
heatmaply(normalize(wh_matrix),
          colors = coul,
          dist_method = "euclidean",
          hclust_method = "ward.D")
```




## percentize



```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-height: 10

coul <- colorRampPalette(brewer.pal(8, "PiYG"))(40)
heatmaply(percentize(wh_matrix),
          colors = coul,
          dist_method = "euclidean",
          hclust_method = "ward.D")
```



:::

### 1.3.2 Selecting the best clustering method + the number of clusters

- In `dend_expend()`, the `optim` value measures how well the dendrogram preserves the original distance matrix, usually using cophenetic correlation (default). Higher values (closer to 1) indicate better alignment.
- To find the best dendrogram, choose the combination of distance and clustering methods with the highest optim value. Use `find_dend()` to automatically select and plot the best one.




```{r}
#| code-fold: true
#| code-summary: "Show the code"

wh_d <- dist(normalize(wh_matrix), 
             method="euclidean")
den_perf <- dend_expend(wh_d)$performance
den_perf <- data.frame(den_perf)
sorted_df_desc <- den_perf %>%
  arrange(desc(optim))
print(sorted_df_desc)
```




Based on the table, the "average" method has the highest optimum value. We will use `find_k()` to determine the optimal number of clusters.




```{r}
#| code-fold: true
#| code-summary: "Show the code"

wh_clust <- hclust(wh_d, method = "average")
num_k <- find_k(wh_clust)
plot(num_k)
```




The final plot will look like this.




```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-height: 10

coul <- colorRampPalette(brewer.pal(8, "PiYG"))(40)
heatmaply(normalize(wh_matrix),
          colors = coul,
          dist_method = "euclidean",
          hclust_method = "average",
          k_row = 3)
```




### 1.3.3 Seriation

::: panel-tabset
## None



```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-height: 10

coul <- colorRampPalette(brewer.pal(8, "PiYG"))(40)
heatmaply(normalize(wh_matrix),
          colors = coul,
          dist_method = "euclidean",
          seriate = "none")
```




## Optimal leaf ordering



```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-height: 10

coul <- colorRampPalette(brewer.pal(8, "PiYG"))(40)
heatmaply(normalize(wh_matrix),
          colors = coul,
          dist_method = "euclidean",
          seriate = "OLO")
```




## Gruvaeus and Wainer



```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-height: 10

coul <- colorRampPalette(brewer.pal(8, "PiYG"))(40)
heatmaply(normalize(wh_matrix),
          colors = coul,
          dist_method = "euclidean",
          seriate = "GW")
```




## Mean



```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-height: 10

coul <- colorRampPalette(brewer.pal(8, "PiYG"))(40)
heatmaply(normalize(wh_matrix),
          colors = coul,
          dist_method = "euclidean",
          seriate = "mean")
```



:::

### 1.3.4 Final Plot




```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-height: 12

coul <- colorRampPalette(brewer.pal(8, "PiYG"))(40)
heatmaply(normalize(wh_matrix),
          Colv=NA,
          seriate = "none",
          colors = coul,
          k_row = 3,
          margins = c(NA,200,60,NA),
          fontsize = 7,
          fontsize_row = 5,
          fontsize_col = 6,
          main="Normalized World Happiness Score and Variables by Country, 2018",
          xlab = "World Happiness Indicators",
          ylab = "World Countries"
          )
```




## 1.4 Additional References
- https://www.datanovia.com/en/lessons/heatmap-in-r-static-and-interactive-visualization/#google_vignette
- https://cran.r-project.org/web/packages/heatmaply/vignettes/heatmaply.html

# 2 Visual Correlation Analysis

The following section was modified according to [https://r4va.netlify.app/chap06](this%20chapter). We'll be using the wine data.

## 2.1 Data Preparation



```{r}
#| code-fold: true
#| code-summary: "Loading packages & data import"

pacman::p_load(corrplot, ggstatsplot, tidyverse)

wine <- read_csv("../data/wine_quality.csv")
```




## 2.2 Correlation Matrix

### 2.2.1 Single Correlation Matrix
::: panel-tabset

## `pairs()`



```{r}
#| code-fold: true
#| code-summary: "Show the code"

cmap <- colorRampPalette(c("red", "white", "blue"))(100)
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...) {
  usr <- par("usr")
  on.exit(par(usr))
  par(usr = c(0, 1, 0, 1))
  
  r <- cor(x, y, use="complete.obs")  # Compute correlation
  txt <- format(c(abs(r), 0.123456789), digits=digits)[1]
  txt <- paste(prefix, txt, sep="")
  if (missing(cex.cor)) cex.cor <- 0.8 / strwidth(txt)
  
  # Convert correlation (-1 to 1) into an index for the colormap
  col_index <- round((r + 1) * 49 + 1)  # Scale to 1-100
  col <- cmap[col_index]
  
  # Fill background color
  rect(0, 0, 1, 1, col = col, border = NA)
  
  # Add text with high contrast (black/white depending on background)
  text_col <- ifelse(abs(r) > 0.5, "white", "black")  
  text(0.5, 0.5, txt, cex = cex.cor * (1 + abs(r)) / 2, col = text_col, font = 2)
}
pairs(wine[,1:11], upper.panel = panel.cor)

```




## `ggcormat()`




```{r}
#| code-fold: true
#| code-summary: "Show the code"

ggstatsplot::ggcorrmat(
  data = wine, 
  cor.vars = 1:11,
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10,
                         lab_size = 3),
  colors = c("red", "white", "blue"),
  title    = "Correlogram for wine dataset",
  subtitle = "Four pairs are not significant at p < 0.05",
  ggplot.component = list(
    theme(text=element_text(size=8),
      axis.text.x = element_text(size = 8),
      axis.text.y = element_text(size = 8)))
)
```




:::

### 2.2.2 Multiple correlation matrix

Faceting can be done by using `grouped_ggcorrmat()`




```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| figure-width: 12
#| figure-height: 8

grouped_ggcorrmat(
  data = wine, 
  cor.vars = 1:11,
  grouping.var = type,  # what is it faceted by
  type = "robust",
  p.adjust.method = "holm",
  plotgrid.args = list(ncol = 2),
  legend.title = element_text(size = 3),
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         pch.cex = 2,
                         tl.cex = 2,
                         lab_size = 2),
  colors = c("red", "white", "blue"),
  annotation.args = list(
    tag_levels = "a",
    title = "Correlogram for wine dataset",
    subtitle = "The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity",
    caption = "Dataset: UCI Machine Learning Repository"
  )
)

```





## 2.3 Additional References
- https://www.rdocumentation.org/packages/ggstatsplot/versions/0.13.0/topics/ggcorrmat

# 3 Parallel Coordinates Plot

The following section was modified according to [https://r4va.netlify.app/chap15](this%20chapter). We'll be using the WH data.

## 3.1 Data Preparation



```{r}
#| code-fold: true
#| code-summary: "Loading packages & data import"

pacman::p_load(GGally, parallelPlot, tidyverse, hrbrthemes)

wh <- read_csv("../data/WHData-2018.csv")
```




## 3.2 Static Parallel Coordinates Plot

### 3.2.1 Getting Started
This is a basic parallel coordinates plot, using `ggparcoord()`



```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-width: 14

ggparcoord(data = wh, 
           columns = c(7:12))
```




The standard plot doesn't reveal any meaning (looks like a bunch of lines). Instead of adding a boxplot like in the tutorial, lets look at adding colours and changing the theme of the plot first.




```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-width: 14

ggparcoord(wh,
    columns = c(7:12), 
    groupColumn = 2,
    showPoints = TRUE, 
    title = "Parallel Coordinates Plot of World Happines Variables",
    alphaLines = 0.3
    ) + 
  theme_ipsum()+
  theme(
    plot.title = element_text(size=10)
  )
```




### 3.2.2 Scaling the data

Similar to the heatmap in Section 1, we might want to scale the data to have a better visualization. Unfortunately, the lines are still overlapping a lot. Perhaps faceting might be a better option.

::: panel-tabset

## No scaling



```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-width: 14

ggparcoord(wh,
    columns = c(7:12), 
    groupColumn = 2,
    scale = "globalminmax",
    showPoints = TRUE, 
    title = "No scaling",
    alphaLines = 0.3
    ) + 
  theme_ipsum()+
  theme(
    plot.title = element_text(size=10)
  )
```





## Normalize (Min Max)



```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-width: 14

ggparcoord(wh,
    columns = c(7:12), 
    groupColumn = 2,
    scale = "uniminmax",
    showPoints = TRUE, 
    title = "Standardize to Min = 0, Max = 1",
    alphaLines = 0.3
    ) + 
  theme_ipsum()+
  theme(
    plot.title = element_text(size=10)
  )
```




## Standardize



```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-width: 14

ggparcoord(wh,
    columns = c(7:12), 
    groupColumn = 2,
    scale = "std",
    showPoints = TRUE, 
    title = "Normalize univariately (substract mean & divide by sd)",
    alphaLines = 0.3
    ) + 
  theme_ipsum()+
  theme(
    plot.title = element_text(size=10)
  )
```





## Standardize + Center




```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-width: 14

ggparcoord(wh,
    columns = c(7:12), 
    groupColumn = 2,
    scale = "center",
    showPoints = TRUE, 
    title = "Standardize + Center",
    alphaLines = 0.3
    ) + 
  theme_ipsum()+
  theme(
    plot.title = element_text(size=10)
  )
```




:::

### 3.2.3 Let's add a boxplot




```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-width: 14

ggparcoord(wh,
    columns = c(7:12), 
    groupColumn = 2,
    scale = "uniminmax",
    boxplot = TRUE,
    title = "Parallel Coordinates Plot of World Happines Variables",
    alphaLines = 0.3
    ) + 
  theme_ipsum()+
  theme(
    plot.title = element_text(size=10)
  )
```




### 3.2.4 Parallel Coordinates with Facet




```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-width: 14
#| fig-height: 14

ggparcoord(wh,
    columns = c(7:12), 
    groupColumn = 2,
    scale = "uniminmax",
    boxplot = TRUE,
    title = "Multiple Parallel Coordinates Plot of World Happines Variables",
    alphaLines = 0.3
    ) + 
  theme_ipsum()+
  theme(
    plot.title = element_text(size=10),
    axis.text.x = element_text(angle = 90)
  ) +
 facet_wrap(~ Region)
```




## 3.3 Interative Parallel Coordinates Plot

### 3.3.1 Basic plot

The following plot is coloured based on the happiness score.



```{r}
#| code-fold: true
#| code-summary: "Show the code"
wh <- wh %>%
  select("Happiness score", c(7:12))
parallelPlot(wh,
             width = 320,
             height = 250,
             rotateTitle = TRUE,
            refColumnDim = "Happiness score", 
            continuousCS = "YlOrRd")
```




### 3.3.2 With histogram




```{r}
#| code-fold: true
#| code-summary: "Show the code"

histoVisibility <- rep(TRUE, ncol(wh))
parallelPlot(wh,
             width = 320,
             height = 250,
             rotateTitle = TRUE,
            refColumnDim = "Happiness score", 
            continuousCS = "YlOrRd",
            histoVisibility = histoVisibility)
```




## 3.4 Additional References
- https://r-graph-gallery.com/parallel-plot-ggally.html
- https://cran.r-project.org/web/packages/parallelPlot/vignettes/introduction-to-parallelplot.html 

# 4 Ternary Plot
The following section was modified according to [https://r4va.netlify.app/chap13](this%20chapter).

## 4.1 Data Preparation



```{r}
#| code-fold: true
#| code-summary: "Loading packages & data import"

pacman::p_load(plotly, ggtern, tidyverse)

pop_data <- read_csv("../data/respopagsex2000to2018_tidy.csv") 
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"

agpop_mutated <- pop_data %>%
  mutate(`Year` = as.character(Year)) %>%  # Convert Year to character type
  spread(AG, Population) %>%  # Reshape data: AG categories become separate columns
  mutate(YOUNG = rowSums(.[4:8])) %>%  # Sum columns 4 to 8 for the "YOUNG" age group
  mutate(ACTIVE = rowSums(.[9:16])) %>%  # Sum columns 9 to 16 for the "ACTIVE" age group
  mutate(OLD = rowSums(.[17:21])) %>%  # Sum columns 17 to 21 for the "OLD" age group
  mutate(TOTAL = rowSums(.[22:24])) %>%  # Sum columns 22 to 24 for the "TOTAL" population
  filter(Year == 2018) %>%  # Keep only rows where Year is 2018
  filter(TOTAL > 0)  # Remove rows where TOTAL population is 0 or missing

head(agpop_mutated)
```




## 4.2 Static Ternary Diagram




```{r}
#| code-fold: true
#| code-summary: "Show the code"

ggtern(data = agpop_mutated,
       aes(x = YOUNG,
           y = ACTIVE, 
           z = OLD)) +
  geom_point() +
  labs(title="Population structure, 2018") +
  theme_rgbw()
```




## 4.3 Interactive Ternary Diagram




```{r}
#| code-fold: true
#| code-summary: "Show the code"

# reusable function for creating annotation object
label <- function(txt) {
  list(
    text = txt, 
    x = 0.1, y = 1,
    ax = 0, ay = 0,
    xref = "paper", yref = "paper", 
    align = "center",
    font = list(family = "serif", size = 15, color = "white"),
    bgcolor = "#b3b3b3", bordercolor = "black", borderwidth = 2
  )
}

# reusable function for axis formatting
axis <- function(txt) {
  list(
    title = txt, tickformat = ".0%", tickfont = list(size = 10)
  )
}

ternaryAxes <- list(
  aaxis = axis("Young"), 
  baxis = axis("Active"), 
  caxis = axis("Old")
)

# Initiating a plotly visualization 
plot_ly(
  agpop_mutated, 
  a = ~YOUNG,
  b = ~ACTIVE,
  c = ~OLD, 
  color = ~PA,
  type = "scatterternary",
  hovertemplate = paste(
    "Young: %{a:.3f}%<br>",
    "Active: %{b:.3f}%<br>",
    "Old: %{c:.3f}%<br>",
    "PA: %{text}<extra></extra>"
  ),
  text = ~PA
) %>%
  layout(
    annotations = label("Ternary Markers"), 
    ternary = ternaryAxes
  )
```




# 5 Treemap Visualisation

The following section was modified according to [https://r4va.netlify.app/chap16](this%20chapter).

## 5.1 Data Preparation



```{r}
#| code-fold: true
#| code-summary: "Loading packages & data import"

pacman::p_load(treemap, treemapify, tidyverse) 
```
